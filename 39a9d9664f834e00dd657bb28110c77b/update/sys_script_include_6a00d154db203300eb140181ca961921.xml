<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.AddRespondersController</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>AddRespondersController</name>
        <script>/*** Changes made to this script are not supported by PagerDuty ***/
var AddRespondersController = x_pd_integration.AjaxHelper.createAjaxController({
  type: 'AddRespondersController',
  suggestAssigmentGroups: function suggestAssigmentGroups(searchString) {
    var gr = new GlideRecordSecure('x_pd_integration_join_group_and_ep_mapping');
    gr.addQuery('ag_name', 'CONTAINS', searchString);
    var grOR = gr.addNotNullQuery('ag_x_pd_integration_pagerduty_escalation');
    grOR.addOrCondition('ep_escalation_policy', '!=', 'NULL');
    gr.query();
    var items = [];
    while (gr.next()) {
      items.push({
        id: '' + gr.ag_sys_id,
        text: '' + gr.ag_name,
        ep_active: '' + gr.ep_active,
        ep_escalation_policy: '' + gr.ep_escalation_policy,
      });
    }
    items = items.filter(function(item) {
      return item.ep_escalation_policy ? item.ep_active === 'true' : true;
    });
    return { items: items };
  },

  suggestUsers: function suggestUsers(text) {
    var user = new GlideRecordSecure('sys_user');
    user.addQuery('name', 'CONTAINS', text);
    user.addNotNullQuery('x_pd_integration_pagerduty_id');
    user.query();
    var items = [];
    while (user.next()) {
      items.push({
        id: '' + user.sys_id,
        text: '' + user.name,
      });
    }
    return { items: items };
  },

  suggestConferenceBridges: function suggestConferenceBridges(text) {
    return {
      items: [{
        id: 'tgeq4',
        label: 'ConfereceBridge1'
      },{
        id: 'gdag',
        label: 'ConfereceBridge2'
      },{
        id: 'df34h4',
        label: 'ConfereceBridge3'
      }]
    };
  },

  sendRespondersRequest: function sendRespondersRequest(data) {
    var pd = new x_pd_integration.PagerDuty();
    var warnings = [];

    var currentPdUserId = pd.getUserIDFromFieldData(data.currentUser, 'sys_id', true);
    var incident = new GlideRecordSecure('incident');

    if (!incident.get(data.snIncidentId)) {
      throw new Error("You can not use this form out of context of existing incident");
    }

    if (gs.nil(incident.x_pd_integration_incident)) {
      throw new Error("Current incident is not linked to PagerDuty");
    }
    
    var responder_request_targets = []
      .concat(
        data.userIds.map(mapSnUserIdToUserReference),
        data.assigmentGroupIds.map(mapAssigmentGroupToEpReference)
      )
      .filter(function (item) {return !!item;});

    if (responder_request_targets.length === 0) {
      throw new Error(warnings.join('. ') || 'Please select at least one target.');
    }

    var body = {
      requester_id: currentPdUserId,
      message: data.message,
      responder_request_targets: responder_request_targets,
    };

    var rest = new x_pd_integration.PagerDuty_REST();
    var from = pd.getUserEmailByPDID(currentPdUserId);
    var feature = 'incidents/' + incident.x_pd_integration_incident + '/responder_requests';
    var result = rest.postREST(feature, body, from);

    if (rest.hasError()) {
      throw new Error(rest.getError());
    }

    if (result.haveError()) {
      throw new Error('' + result.getErrorMessage() + '. Details from PagerDuty API: ' + result.getBody());
    }

    return {
      result:result.getBody(),
      warnings: warnings,
      message: "Responders were successfully added to the incident",
    };

    function mapAssigmentGroupToEpReference(id) {
      var assignment_group = new GlideRecordSecure('sys_user_group');
      if (!assignment_group.get(id)) {
        warnings.push('Can not find Assigment Group with ID = ' + id);
        return null;
      }

      var assignmentGroupId = id;
      var epHelper = new x_pd_integration.EscalationPolicyHelper();
      epHelper.setIncidentId(data.snIncidentId);
      var snPriorityId = epHelper.getIncidentSnPriorityId();
      var pdEscalationPolicyId = epHelper.getPDEscalationPolicyIdWithPriority(assignmentGroupId, snPriorityId);

      if (!pdEscalationPolicyId) {
        warnings.push('Ignoring Group "' + assignment_group.name + '": is not mapped to Escalation Policy');
        return null;
      }

      return { responder_request_target: {
        id: pdEscalationPolicyId,
        type: 'escalation_policy_reference',
      } };
    }

    function mapSnUserIdToUserReference(id) {
      var pdid = pd.getUserIDFromFieldData(id, 'sys_id', false);
      if (!pdid) {
        var user = new GlideRecordSecure('sys_user');
        if (!user.get(id)) {
          warnings.push('Can not find User with ID = ' + id);
        } else {
          warnings.push('Ignoring User "' + user.name + '": is not mapped to PagerDuty User');
        }
        return null;
      }

      return { responder_request_target: {
        id: pdid,
        type: 'user_reference',
      } };
    }

  },

});
</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2019-03-28 11:49:13</sys_created_on>
        <sys_id>6a00d154db203300eb140181ca961921</sys_id>
        <sys_mod_count>100</sys_mod_count>
        <sys_name>AddRespondersController</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_6a00d154db203300eb140181ca961921</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2020-10-06 20:55:17</sys_updated_on>
    </sys_script_include>
</record_update>
