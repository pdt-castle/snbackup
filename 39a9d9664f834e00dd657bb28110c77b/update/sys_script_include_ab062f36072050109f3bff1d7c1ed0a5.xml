<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.EscalationPolicies</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Refreshes all Escalation Policies from PagerDuty API to ServiceNow table [x_pd_integration_escalation_policies].</description>
        <name>EscalationPolicies</name>
        <script>/*** Changes made to this script are not supported by PagerDuty ***/
var EscalationPolicies = Class.create();
EscalationPolicies.prototype = {
  initialize: function() {
    this.epTableImport = 'x_pd_integration_escalation_policies_import';
    this.epTable = 'x_pd_integration_escalation_policies';
    this.mappingTable = 'x_pd_integration_map_priority_to_ep';
  },

  refreshEscalationPolicies: function() {
    var rest = new x_pd_integration.PagerDuty_REST();
    var fetchedItems = rest.getAllItems('escalation_policies', transformItem);

    if (rest.hasError())
      return { error: rest.getError(), message: '' };

    if (!fetchedItems.length)
      return { error: '', message: 'No escalation policies were fetched from PagerDuty' };

    var storedItems = getStoredItems(this.epTable, 'escalation_policy_id');
    upsertEscalationPolicies(fetchedItems, this.epTableImport);
    var staleItems = subtract(storedItems, fetchedItems, 'escalation_policy_id');
    inactivate(this.epTable, 'escalation_policy_id', staleItems);

    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    var mappingStaleItems = {};
    Object.keys(staleItems).forEach(function(pdId) {
      mappingStaleItems[epHelper.convertEpToSn(pdId, {all: true})] = true;
    });
    inactivate(this.mappingTable, 'escalation_policy', mappingStaleItems);

    return { error: '', message: 'Refreshed escalation policies from PagerDuty' };
  },

  upsert: function(pdEscalationPolicy) {
    var gr = new GlideRecordSecure(this.epTableImport);
    gr.initialize();
    gr.active = true;
    gr.escalation_policy_id = pdEscalationPolicy.id;
    gr.escalation_policy_name = pdEscalationPolicy.name;
    gr.subdomain = extractSubdomain(pdEscalationPolicy.html_url);
    gr.insert();
  },

  type: 'EscalationPolicies'
};

var transformItem = function(item) {
  return {
    active: true,
    escalation_policy_id: item.id,
    escalation_policy_name: item.name,
    subdomain: extractSubdomain(item.html_url),
  };
};

var getStoredItems = function(tableName, fieldName) {
  var records = {};
  var rec = new GlideRecordSecure(tableName);
  rec.query();
  while (rec.next()) {
    if (rec[fieldName])
      records[rec[fieldName].toString()] = { active: rec.active.toString() };
  }
  return records;
};

var upsertEscalationPolicies = function(escalationPolicies, tableName) {
  escalationPolicies.forEach(function(ep) {
    var rec = new GlideRecordSecure(tableName);
    rec.initialize();
    rec.active = ep.active;
    rec.escalation_policy_id = ep.escalation_policy_id;
    rec.escalation_policy_name = ep.escalation_policy_name;
    rec.subdomain = ep.subdomain;
    rec.insert();
  });
};

var subtract = function(storedItems, fetchedItems, fieldName) {
  var staleItems = JSON.parse(JSON.stringify(storedItems));
  fetchedItems.forEach(function(fetchedObject) {
    if (staleItems[fetchedObject[fieldName]])
      delete staleItems[fetchedObject[fieldName]];
  });
  return staleItems;
};

var inactivate = function(tableName, fieldName, staleItems) {
  Object.keys(staleItems).forEach(function(id) {
    var rec = new GlideRecordSecure(tableName);
    rec.addQuery(fieldName, id);
    rec.query();
    while (rec.next()) {
      if (rec.active) {
        rec.active = false;
        rec.update();
      }
    }
  });
};

var extractSubdomain = function(url) {
  var subdomain = '';
  if (url) {
    subdomain = url.split('://').slice(-1)[0].split('.')[0];
  }
  return subdomain;
};
</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2020-05-07 09:34:14</sys_created_on>
        <sys_id>ab062f36072050109f3bff1d7c1ed0a5</sys_id>
        <sys_mod_count>176</sys_mod_count>
        <sys_name>EscalationPolicies</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_ab062f36072050109f3bff1d7c1ed0a5</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2021-05-12 14:57:19</sys_updated_on>
    </sys_script_include>
</record_update>
