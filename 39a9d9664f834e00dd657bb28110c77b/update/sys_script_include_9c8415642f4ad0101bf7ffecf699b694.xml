<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.ServiceProvisioningController</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ServiceProvisioningController</name>
        <script><![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var ServiceProvisioningController = Class.create();
ServiceProvisioningController.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
  initialize: function (request, responseXML, gc) {
    this.request = request;
    this.responseXML = responseXML;
    this.gc = gc;
    this.parents = {};
    this.importTable = 'x_pd_integration_pagerduty_service_provisioning_import';
    this.provTable = 'x_pd_integration_pagerduty_service_provisioning';
    this.validator = new x_pd_integration.ServiceProvisioningValidator();
    this.hadValidationWarnings = false;
  },

  prepareBuckets: function () {
    var column = this.getParameter('sysparm_column');
    var classes = this.getCiClasses();
    var arrayWithValueLabelObjects = classes.array;
    var objectWithValueLabelPairs = classes.object;

    var savedClasses;
    var gr = new GlideRecord('x_pd_integration_pagerduty_service_provisioning_configuration');
    gr.query();
    if (gr.next()) {
      savedClasses = '' + gr[column];
    }

    var classesRight = [];
    var savedClassNames = [];
    if (savedClasses) {
      savedClassNames = savedClasses.split(',');
      savedClassNames.forEach(function (name) {
        classesRight.push({
          value: name,
          label: objectWithValueLabelPairs[name]
        });
      });
    }

    var classesLeft = arrayWithValueLabelObjects.filter(function (obj) {
      return savedClassNames.indexOf(obj.value) === -1;
    });
    classesLeft.sort(function (a, b) {
      if (a.label < b.label) return -1;
    });

    return JSON.stringify({result: true, left_bucket: classesLeft, right_bucket: classesRight});
  },

  saveProvisioningConfiguration: function () {
    var json = this.getParameter('sysparm_json');
    var data = JSON.parse(json);

    this.updateConfig(data.config);

    var filter = this.getFilter(data.first_table_filter_sys_id);

    if (data.config.use_cmdb_relationships) {
      if (data.first_table && data.first_table_column) {
        var ciSet = this.getCiSet({
          table: data.first_table,
          filter: filter,
          name_column: data.first_table_column
        });
        ciSet.forEach(function (ci) {
          this.setRelationships(null, null, ci, data.config);
        }, this);
      }
      if (data.config.enable_ci_provisioning) {
        var ci = this.getCi(data.ci);
        this.setRelationships(null, null, ci, data.config);
      }
    }

    if (!data.config.use_cmdb_relationships) {
      this.setCustomRelationships(data);
    }

    return JSON.stringify({result: true, hadValidationWarnings: this.hadValidationWarnings});
  },

  revalidateServices: function () {
    var gr = new GlideRecordSecure(this.provTable);
    gr.addQuery('provisioned', false);
    gr.query();
    while (gr.next()) {
      var rel = this.convertGlideRecordToRelationship(gr);
      gr.validation_warnings = this.validateRelationship(rel).warningsString;
      gr.update();
    }
    return JSON.stringify({result: true, hadValidationWarnings: this.hadValidationWarnings});
  },

  isTableHasNameColumn: function () {
    var tableSysId = this.getParameter('sysparm_table_sys_id');
    var grTable = new GlideRecord('sys_db_object');
    if (!grTable.get(tableSysId)) {
      return JSON.stringify({result: false});
    }
    var tableName = String(grTable.name);
    var grDictionary = new GlideRecord('sys_dictionary');
    grDictionary.addQuery('name', tableName);
    grDictionary.query();
    while (grDictionary.next()) {
      if (String(grDictionary.column_label) === 'Name') {
        return JSON.stringify({result: true, sys_id: String(grDictionary.sys_id)});
      }
    }

    return JSON.stringify({result: false});
  },

  triggerProvisioning: function () {
    var pdProvisioning = new x_pd_integration.PagerDutyProvisioning();
    pdProvisioning.customProvisioning();
    var stats = pdProvisioning.getProvisioningStats();
    return JSON.stringify({
      error: pdProvisioning.getErrors().join('<br />'),
      result: {
        provisioned: stats.provisioned,
        skipped: stats.skipped,
      }
    });
  },

  queryAssociationStatus: function () {
    var pdProvisioning = new x_pd_integration.PagerDutyProvisioning();
    var stats = pdProvisioning.queryAssociationStatus();
    return JSON.stringify({
      error: '',
      result: stats,
    });
  },

  clearAssociatingFlag: function () {
    var pdProvisioning = new x_pd_integration.PagerDutyProvisioning();
    pdProvisioning.clearAssociatingFlag();
    return JSON.stringify({
      error: '',
      result: 'ok',
    });
  },

  getTableName: function (tableSysId) {
    var tableName;
    var error;
    try {
      if (!tableSysId) {
        tableSysId = this.getParameter('sysparm_table_sys_id');
      }
      var grTable = new GlideRecordSecure('sys_db_object');
      grTable.addQuery('sys_id', tableSysId);
      grTable.query();
      if (grTable.next()) {
        tableName = String(grTable.name);
      } else {
        error = 'Table with sys_id ' + tableSysId + ' was not found';
        gs.error(error);
      }
    } catch (ex) {
      gs.error('Exception on retrieving table name by sys_id: {0}', ex.message);
      error = ex;
    } finally {
      return JSON.stringify({
        error: error,
        result: tableName,
      });
    }
  },

  getColumnName: function (tableName, columnLabel) {
    var columnName;
    var error;
    try {
      if (!(tableName && columnLabel)) {
        tableName = this.getParameter('sysparm_table_name');
        columnLabel = this.getParameter('sysparm_column_label');
      }
      var grDictionary = new GlideRecordSecure('sys_dictionary');
      grDictionary.addQuery('name', tableName);
      grDictionary.addQuery('column_label', columnLabel);
      grDictionary.query();
      if (grDictionary.next()) {
        columnName = String(grDictionary.element);
      } else {
        error = 'Column with label ' + columnLabel + ' was not found in the ' + tableName + ' table';
        gs.error(error);
      }
    } catch (ex) {
      gs.error('Exception on retrieving column name by table name and column label: {0}', ex.message);
      error = ex;
    } finally {
      return JSON.stringify({
        error: error,
        result: columnName,
      });
    }
  },

  getData: function () {
    var config = JSON.parse(this.getParameter('sysparm_config'));
    var answer;
    var errors = [];
    var results = {};

    if (config.first_table_sys_id && config.first_table_column_label) {
      answer =
        JSON.parse(this.getTableName(config.first_table_sys_id));
      if (answer.result) {
        results.first_table_name = answer.result;
      } else {
        errors.push(answer.error);
      }

      answer =
        JSON.parse(this.getColumnName(results.first_table_name, config.first_table_column_label));
      if (answer.result) {
        results.first_table_column_name = answer.result;
      } else {
        errors.push(answer.error);
      }
    }

    if (config.second_table_sys_id && config.second_table_column_label) {
      answer =
        JSON.parse(this.getTableName(config.second_table_sys_id));
      if (answer.result) {
        results.second_table_name = answer.result;
      } else {
        errors.push(answer.error);
      }

      answer =
        JSON.parse(this.getColumnName(results.second_table_name, config.second_table_column_label));
      if (answer.result) {
        results.second_table_column_name = answer.result;
      } else {
        errors.push(answer.error);
      }
    }

    return JSON.stringify({
      results: results,
      errors: errors,
    });
  },

  // ---

  getFilter: function (sysId) {
    if (!sysId) {
      return '';
    }
    var grFilter = new GlideRecord('sys_filter');
    if (grFilter.get(sysId)) {
      return grFilter.filter;
    }
  },

  getCi: function (sys_id) {
    var ci = {
      name: '',
      sys_id: sys_id,
    };
    var gr = new GlideRecord('cmdb_ci');
    if (!gr.get(sys_id)) {
      throw new Error('Can not find cmdb_ci record with id: ' + sys_id);
    }
    ci = {
      name: '' + gr.name,
      sys_id: '' + gr.sys_id,
    };
    return ci;
  },

  getCiSet: function (obj) {
    var table = obj.table;
    var filter = obj.filter;
    var nameColumn = obj.name_column;

    var cis = [];
    if (!table) return cis;
    if (!nameColumn) nameColumn = 'name';
    var gr = new GlideRecord(table);
    gr.addActiveQuery();
    if (filter) {
      gr.addEncodedQuery(filter);
    }
    gr.query();
    while (gr.next()) {
      cis.push({
        name: '' + gr[nameColumn],
        sys_id: '' + gr.sys_id,
      });
    }
    return cis;
  },

  setRelationships: function (parentCi, parentType, childCi, config) {
    try {
      var useSc = config.use_service_classification;
      var bsCiClasses = config.bs_ci_classes.split(',');
      var tsCiClasses = config.ts_ci_classes.split(',');

      var ciClass = this.getCiClass(childCi.sys_id);
      var isService = this.isService(ciClass);
      var ciSc;
      if (isService) {
        ciSc = this.getCiServiceClassification(ciClass, childCi.sys_id);
      }
      if (bsCiClasses.indexOf(ciClass) !== -1 && tsCiClasses.indexOf(ciClass) !== -1) {
        if (!useSc || isService && useSc &&
          ['Business Service', 'Technical Service'].indexOf(ciSc) === -1) {
          if (parentCi) {
            this.addRowIntoTable({
              parent_ci: parentCi.sys_id,
              parent_ci_name: parentCi.name,
              parent_type: parentType,
              child_ci: childCi.sys_id,
              child_ci_name: childCi.name,
              child_type: 'Business Service',
            });
          }
          this.addRowIntoTable({
            parent_ci: childCi.sys_id,
            parent_ci_name: childCi.name,
            parent_type: 'Business Service',
            child_ci: childCi.sys_id,
            child_ci_name: childCi.name,
            child_type: 'Technical Service',
          });
          this.getChildCis(childCi.sys_id, 'Technical Service', config);
          return;
        }
      }
      if (bsCiClasses && bsCiClasses.indexOf(ciClass) !== -1) {
        if (!useSc || useSc && !isService ||
          isService && useSc && ['', 'Business Service'].indexOf(ciSc) !== -1) {
          if (parentCi) {
            this.addRowIntoTable({
              parent_ci: parentCi.sys_id,
              parent_ci_name: parentCi.name,
              parent_type: parentType,
              child_ci: childCi.sys_id,
              child_ci_name: childCi.name,
              child_type: 'Business Service',
            });
          } else {
            this.addRowIntoTable({
              parent_ci: childCi.sys_id,
              parent_ci_name: childCi.name,
              parent_type: 'Business Service',
            });
          }
          this.getChildCis(childCi.sys_id, 'Business Service', config);
          return;
        }
      }
      if (tsCiClasses && tsCiClasses.indexOf(ciClass) !== -1) {
        if (!useSc || useSc && !isService ||
          isService && useSc && ['', 'Technical Service'].indexOf(ciSc) !== -1) {
          if (parentCi) {
            this.addRowIntoTable({
              parent_ci: parentCi.sys_id,
              parent_ci_name: parentCi.name,
              parent_type: parentType,
              child_ci: childCi.sys_id,
              child_ci_name: childCi.name,
              child_type: 'Technical Service',
            });
          } else {
            this.addRowIntoTable({
              parent_ci: childCi.sys_id,
              parent_ci_name: childCi.name,
              parent_type: 'Technical Service',
            });
          }
          this.getChildCis(childCi.sys_id, 'Technical Service', config);
          return;
        }
      }
      return;
    } catch (e) {
      gs.error('Error on setting relationships: {0}', e);
    }
  },

  addRowIntoTable: function (record) {
    var gr = new GlideRecord(this.importTable);
    gr.initialize();
    gr.parent_type = record.parent_type;
    gr.parent_ci = record.parent_ci;
    gr.parent_ci_name = record.parent_ci_name;
    gr.child_type = record.child_type;
    gr.child_ci = record.child_ci;
    gr.child_ci_name = record.child_ci_name;
    gr.validation_warnings = this.validateRelationship(record).warningsString;
    gr.insert();
  },

  getCiClass: function (ciSysId) {
    var grCi = new GlideRecord('cmdb_ci');
    if (!grCi.get(ciSysId)) {
      gs.error('There is no CI with the sys_id {0}', ciSysId);
    }

    return String(grCi.sys_class_name);
  },

  isService: function (ciClass) {
    var gr = new GlideRecord('sys_dictionary');
    gr.addQuery('name', ciClass);
    gr.addQuery('element', 'service_classification');
    gr.query();
    if (gr.next()) {
      return true;
    }

    return false;
  },

  getCiServiceClassification: function (table, sysId) {
    var gr = new GlideRecord(table);
    if (!gr.get(sysId)) {
      gs.error('There is no record with sys_id {0} in the table {1}', sysId, table);
    }

    return String(gr.service_classification);
  },

  getChildCis: function (parentCiSysId, parentType, config) {
    try {
      var gr = new GlideRecord('cmdb_rel_ci');
      var childCiName = '';
      var childCiSysId = '';
      gr.addQuery('parent', parentCiSysId);
      gr.query();
      while (gr.next()) {
        childCiName = String(gr.child.name);
        if (!gs.nil(childCiName)) {
          childCiSysId = String(gr.child.sys_id);
        }
        if (this.parents[parentCiSysId + ':' + childCiSysId]) {
          return;
        }
        this.parents[parentCiSysId + ':' + childCiSysId] = true;
        var parent = {
          name: String(gr.parent.name),
          sys_id: String(gr.parent.sys_id),
        };
        var child = {
          name: childCiName,
          sys_id: childCiSysId,
        };
        this.setRelationships(parent, parentType, child, config);
      }
    } catch (e) {
      gs.error('Error on adding rows into `x_pd_integration_pagerduty_service_provisioning` table: {0}', e);
    }
  },

  updateConfig: function (data) {
    var gr = new GlideRecord('x_pd_integration_pagerduty_service_provisioning_configuration');
    gr.query();
    if (gr.next()) {
      Object.keys(data).forEach(function (key) {
        gr[key] = data[key];
      });
      gr.update();
    } else {
      gr.initialize();
      Object.keys(data).forEach(function (key) {
        gr[key] = data[key];
      });
      gr.insert();
    }
  },

  setCustomRelationships: function (data) {
    var parentTable, parentTableFilterSysId, parentType, parentNameColumn;
    var childTable, childTableFilterSysId, childType, childNameColumn;
    var relationships = [];

    if (data.relationship === 'consumes' ||
      data.relationship === '') {
      parentType = data.first_service_type;
      parentTable = data.first_table;
      parentTableFilterSysId = data.first_table_filter_sys_id;
      parentNameColumn = data.first_table_column;
      childType = data.second_service_type;
      childTable = data.second_table;
      childTableFilterSysId = data.second_table_filter_sys_id;
      childNameColumn = data.second_table_column;
    } else {
      parentType = data.second_service_type;
      parentTable = data.second_table;
      parentTableFilterSysId = data.second_table_filter_sys_id;
      parentNameColumn = data.first_table_column;
      childType = data.first_service_type;
      childTable = data.first_table;
      childTableFilterSysId = data.first_table_filter_sys_id;
      childNameColumn = data.second_table_column;
    }

    var parentTableFilter = this.getFilter(parentTableFilterSysId);
    var childTableFilter = this.getFilter(childTableFilterSysId);

    if (!parentTable) return;

    var parentCIs = this.getAllItems({
      table: parentTable,
      filter: parentTableFilter,
      name_column: parentNameColumn
    });

    if (childTable) {
      var childCIs = this.getAllItems({
        table: childTable,
        filter: childTableFilter,
        name_column: childNameColumn
      });
      parentCIs.forEach(function (parentCI) {
        childCIs.forEach(function (childCI) {
          relationships.push({
            parent_type: parentType,
            parent_ci: parentCI.sys_id,
            parent_ci_name: parentCI.name,
            child_type: childType,
            child_ci: childCI.sys_id,
            child_ci_name: childCI.name,
          });
        });
      });
    } else {
      parentCIs.forEach(function (parentCI) {
        relationships.push({
          parent_type: parentType,
          parent_ci: parentCI.sys_id,
          parent_ci_name: parentCI.name,
          child_type: null,
          child_ci: null,
          child_ci_name: null,
        });
      });
    }

    relationships.forEach(function (rel) {
      rel.validation_warnings = this.validateRelationship(rel).warningsString;
    }, this);

    this.upsertRelationships(relationships);
    return true;
  },

  validateRelationship: function (rel) {
    var validationResult = this.validator.validateRelationship(rel);
    if (!validationResult.isValid) this.hadValidationWarnings = true;
    return validationResult;
  },

  getAllItems: function (obj) {
    var table = obj.table;
    var filter = obj.filter;
    var nameColumn = obj.name_column;

    if (!nameColumn) nameColumn = 'name';
    var items = [];
    var gr = new GlideRecord(table);
    if (filter) {
      gr.addEncodedQuery(filter);
    }
    gr.query();
    while (gr.next()) {
      items.push({
        name: '' + gr[nameColumn],
        sys_id: '' + gr.sys_id,
      });
    }
    return items;
  },

  upsertRelationships: function (relationships) {
    var gr = new GlideRecord(this.importTable);
    relationships.forEach(function (rel) {
      gr.initialize();
      gr.parent_type = rel.parent_type;
      gr.parent_ci = rel.parent_ci;
      gr.parent_ci_name = rel.parent_ci_name;
      gr.child_type = rel.child_type;
      gr.child_ci = rel.child_ci;
      gr.child_ci_name = rel.child_ci_name;
      gr.validation_warnings = rel.validation_warnings;
      gr.insert();
    });
  },

  getCiClasses: function () {
    var classNames = [];
    var ga = new GlideAggregate('cmdb_ci');
    ga.addAggregate('COUNT');
    ga.groupBy('sys_class_name');
    ga.query();
    while (ga.next()) {
      classNames.push(ga.getValue('sys_class_name'));
    }

    var arrayWithValueLabelObjects = [];
    var objectWithValueLabelPairs = {};
    classNames.forEach(function (name) {
      var gr = new GlideRecord(name);
      arrayWithValueLabelObjects.push({
        value: name,
        label: gr.getClassDisplayValue()
      });
      objectWithValueLabelPairs[name] = gr.getClassDisplayValue();
    });

    return {
      array: arrayWithValueLabelObjects,
      object: objectWithValueLabelPairs
    };
  },

  convertGlideRecordToRelationship: function (gr) {
    var rel = {
      child_ci: '' + gr.child_ci,
      child_ci_name: '' + gr.child_ci_name,
      child_type: '' + gr.child_type,
      parent_ci: '' + gr.parent_ci,
      parent_ci_name: '' + gr.parent_ci_name,
      parent_type: '' + gr.parent_type,
      sys_id: '' + gr.sys_id,
    };
    return rel;
  },

  type: 'ServiceProvisioningController'
});
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2020-07-13 12:45:10</sys_created_on>
        <sys_id>9c8415642f4ad0101bf7ffecf699b694</sys_id>
        <sys_mod_count>269</sys_mod_count>
        <sys_name>ServiceProvisioningController</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_9c8415642f4ad0101bf7ffecf699b694</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2020-11-28 20:42:48</sys_updated_on>
    </sys_script_include>
</record_update>
