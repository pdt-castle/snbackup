<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script><![CDATA[jQuery(function () {
  var $ = jQuery;
  var modal = GlideModal.get();
  var snIncidentId = modal.getPreference('snIncidentId');
  var api = x_pd_integration.AjaxHelper.ajaxClientFor('AddRespondersController');
  var apiFetch = x_pd_integration.AjaxHelper.ajaxClientFor('FetchRespondersController');
  var trackingApi = x_pd_integration.AjaxHelper.ajaxClientFor('TrackingController');
  window.api = api;
  window.apiFetch = apiFetch;
  var loading = false;

  var configuratorMountPoint = document.getElementById('conf-bridge-injection-point');

  if (configuratorMountPoint) {
    var configurator = new x_pd_integration.ConferenceBridgeConfigurator({
      element: configuratorMountPoint,
      snIncidentId: snIncidentId,
    });

    configurator.onError = function (error) {
      jslog(error);
      var message = error.message || 'Unknown error. Details: ' + JSON.stringify(error);
      g_form.addErrorMessage(message);
    };

    $('#add-conf-bridge-toggle').change(function () {
      $('#conf-bridge-injection-point')
        .css(
          'display',
          $(this).is(':checked')
            ? 'block'
            : 'none'
        );
    });
  }

  var groupSelector = new x_pd_integration.PdMultiselect({
    element: document.querySelector('.pd-group-selector'),
    load: function (text, callback) {
      api.suggestAssigmentGroups(text, function (error, data) {
        if (error) {
          jslog(error);
        }
        callback(data);
      });
    }
  });

  var userSelector = new x_pd_integration.PdMultiselect({
    element: document.querySelector('.pd-user-selector'),
    load: function (text, callback) {
      api.suggestUsers(text, function (error, data) {
        if (error) {
          jslog(error);
        }
        callback(data);
      });
    }
  });

  $('.pd-responders-form button.submit-request').on('click', function (event) {
    event.preventDefault();
    event.stopPropagation();
    if (loading) {
      return;
    }
    trackingApi.track('add_responders_dialog_clicked_submit_button', {}, function (error, _result) {
      if (error) {
        jslog('Tracking error: ' + error);
      }
    });
    loading = true;
    $('.pd-responders-form button.submit-request').attr('disabled', true);

    var payload = {
      currentUser: g_user.userID,
      snIncidentId: snIncidentId,
      message: document.querySelector('.pd-resp-request-message').value,
      assigmentGroupIds: groupSelector.getSelectedIds(),
      userIds: userSelector.getSelectedIds(),
    };

    api.sendRespondersRequest(payload, function (error, result) {
      handleErrors(error, result);
      if (!error) {
        apiFetch.fetchResponders(payload, handleErrors);
        refreshList('PagerDuty Response');
      }
    });


    if (configurator && $('#add-conf-bridge-toggle').is(':checked')) {
      configurator.submitRequest(function (e) {
        if (e) {
          jslog(e);
          var message = e.message || 'Unknown error. Details: ' + JSON.stringify(e);
          g_form.addErrorMessage(message);
        } else {
          g_form.addInfoMessage('Conference bridge successfully updated');
        }
      });
    }

    modal.destroy();
  });

  $('.pd-responders-form button.submit-cancel').on('click', function (event) {
    event.preventDefault();
    event.stopPropagation();
    trackingApi.track(
      'add_responders_dialog_clicked_cancel_button', {},
      function (error, _result) {
        if (error) {
          jslog('Tracking error: ' + error);
        }
      }
    );
    modal.destroy();
  });

});

var handleErrors = function (error, result) {
  if (error) {
    jslog(error);

    var message = error.message || 'Unknown error. Details: ' + JSON.stringify(error);
    g_form.addErrorMessage(message);
  } else {
    if (result.warnings.length > 0) {
      g_form.addWarningMessage('Warnings: ' + result.warnings.join('. '));
    }
    if (result.message) {
      g_form.addInfoMessage(result.message);
    }
  }
};

var refreshList = function (listName) {
  try {
    var elementLookup = $$('div.tabs2_list');
    for (var i = 0; i != elementLookup.length; i++) {
      if (elementLookup[i].innerHTML.indexOf(listName) != -1) {
        var listHTML = elementLookup[i].id.split('_');
        var listID = listHTML[0];
        GlideList2.get(listID).refresh('');
      }
    }
  } catch (err) {
    jslog('Error refreshing list ' + listName + ' : ' + err.message);
  }
};
]]></client_script>
        <description/>
        <direct>false</direct>
        <endpoint>x_pd_integration_add_responders_dialog.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
<g:evaluate var="jvar_stamp" expression="new Date().getTime()" />
<script language="javascript" src="x_pd_integration.AjaxHelper.jsdbx?v=${HTML:jvar_stamp}"></script>
<script language="javascript" src="x_pd_integration.PdMultiselect.jsdbx?v=${HTML:jvar_stamp}"></script>
<script language="javascript" src="x_pd_integration.ConferenceBridgeConfigu.jsdbx?v=${HTML:jvar_stamp}"></script>

<g:evaluate>
  var enable_conference_bridge = ('' + gs.getProperty('x_pd_integration.enable_conference_bridge')) === 'true';
  var pdLogo = gs.getProperty('x_pd_integration.pd_logo');
</g:evaluate>

<form class="form_body form-horizontal pd-responders-form">
  <style>
    .pd-responders-form input:focus {
      border: 1px solid #bdc0c4;
      box-shadow: none;
    }

    .pd-responders-form a.btn.btn-default:focus {
      border: 1px solid #bdc0c4;
      box-shadow: none;
    }

    .pd-responders-form a.btn.btn-default:hover {
      box-shadow: none;
    }

    .pd-responders-form {
      margin: 1rem;
    }

    #conf-bridge-injection-point {
      display: none;
    }

    .form_body {
      background-color: #fff;
    }
  </style>

  <div class="row">
    <div class="col-sm-12" style="font-size: medium; height: 5rem">
      Select Assignment Group(s) or User(s) to be added to the Incident.
    </div>
  </div>

  <div class="row">
    <div class="col-sm-12">
      <div class="form-group">
        <div>
          <label class=" col-xs-12 col-md-3 col-lg-4 control-label" style="padding: 0.75rem 0;">
            <span class="label-text">Assignment group</span>
          </label>
        </div>
        <div class="col-xs-10 col-sm-9 col-md-6 col-lg-5 form-field pd-group-selector">
          <div class="input-group ref-container ">
            <input value="" class="form-control element_reference_input"/>
            <span class="input-group-btn">
              <a class="btn btn-default" tabindex="-1" role="button">
                <span class="icon icon-search"></span>
              </a>
            </span>
          </div>
        </div>
      </div>

      <div class="form-group">
        <div>
          <label class=" col-xs-12 col-md-3 col-lg-4 control-label" style="padding: 0.75rem 0;">
            <span class="label-text">User</span>
          </label>
        </div>
        <div class="col-xs-10 col-sm-9 col-md-6 col-lg-5 form-field pd-user-selector">
          <div class="input-group ref-container ">
            <input value="" class="form-control element_reference_input"/>
            <span class="input-group-btn">
              <a class="btn btn-default" tabindex="-1" role="button">
                <span class="icon icon-search"></span>
              </a>
            </span>
          </div>
        </div>
      </div>

      <div class="form-group">
        <div>
          <label class=" col-xs-12 col-md-3 col-lg-4 control-label" style="padding: 0.75rem 0;">
            <span class="label-text">Message</span>
          </label>
        </div>
        <div class="col-xs-10 col-sm-9 col-md-6 col-lg-5 form-field input_controls">
          <div class="input-group ref-container">
            <textarea class="form-control pd-resp-request-message"> </textarea>
          </div>
        </div>
      </div>

      <j:if test="${HTML:enable_conference_bridge}">
        <div class="form-group">
          <div>
            <label class=" col-xs-12 col-md-3 col-lg-4 control-label" style="padding: 1.5rem 0;">
              <span class="label-text">Add Conference Bridge</span>
            </label>
          </div>
          <div class="col-xs-10 col-sm-9 col-md-6 col-lg-5 form-field input_controls" style="padding-top: 1.2rem;">
            <input type="checkbox" id="add-conf-bridge-toggle"/>
          </div>
        </div>
        <div id="conf-bridge-injection-point"></div>
      </j:if>
    </div>
  </div>

  <div class="row" style="margin-top: 2rem">
    <div class="col-sm-12">
      <div class="pull-left" style="padding: 6px 9px;">
        <img width="120" alt="PagerDuty Logo" src="${HTML:pdLogo}" />
      </div>
      <div class="pull-right">
        <button class="btn btn-default submit-cancel" style="margin-right: 1rem">Cancel</button>
        <button class="btn btn-primary submit-request">Add Responders</button>
      </div>
    </div>
  </div>
</form>
</j:jelly>
]]></html>
        <name>add_responders_dialog</name>
        <processing_script/>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2019-03-27 12:52:12</sys_created_on>
        <sys_id>a045144cdba03300eb140181ca961944</sys_id>
        <sys_mod_count>123</sys_mod_count>
        <sys_name>add_responders_dialog</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_ui_page_a045144cdba03300eb140181ca961944</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2023-09-29 14:26:18</sys_updated_on>
    </sys_ui_page>
</record_update>
