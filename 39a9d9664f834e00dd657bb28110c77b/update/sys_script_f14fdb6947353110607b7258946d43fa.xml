<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sys_choice</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="sys_choice">name=incident^ORname=task^EQ<item endquery="false" field="name" goto="false" newquery="false" operator="=" or="false" value="incident"/>
            <item endquery="false" field="name" goto="false" newquery="false" operator="=" or="true" value="task"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>PD Synchronize Options</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script>(function executeRule (current, previous /* null when async*/) {
  var eventName = 'x_pd_integration.pd_synchronize_options';
  // Extract the data from the current GlideRecord and pass it to the event, since for delete operations the event will not have access to the GlideRecord
  var eventData = {
    operation: String(current.operation()),
    choiceSysId: current.getValue('sys_id'),
    snFieldName: current.getValue('element'),
    snFieldTable: current.getValue('name')
  };

  if (eventData.operation === 'insert') {
    var support = new x_pd_integration.PagerDutyCustomFieldsSupport();
    var existingMapping = support.getMappingByFieldNameAndTableName(eventData.snFieldName, eventData.snFieldTable);
    if (existingMapping &amp;&amp; support.isMappingAtMaximumChoiceSize(existingMapping)) {
      gs.addInfoMessage('The current PagerDuty field mapping is at the maximum number of choices. New choices will not be synchronized to PagerDuty.');
      return;
    }
  }
  var jsonEventData = global.JSON.stringify(eventData);
  gs.debug('Firing event {0} for: {1}', eventName, jsonEventData);
  gs.eventQueue(eventName, null, jsonEventData);
})(current, previous);
</script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2023-10-10 16:35:13</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f14fdb6947353110607b7258946d43fa</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PD Synchronize Options</sys_name>
        <sys_overrides/>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_f14fdb6947353110607b7258946d43fa</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2023-10-10 16:35:13</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f14fdb6947353110607b7258946d43fa"/>
</record_update>
