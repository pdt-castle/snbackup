<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.PagerDutyInboundFieldRule</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>/*** Changes made to this script are not supported by PagerDuty ***/&#13;
PagerDuty Inbound field rule methods to extract value from PagerDuty webhook payload or to set default value during transformation based on PagerDuty inbound webhook types.</description>
        <name>PagerDutyInboundFieldRule</name>
        <script><![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var PagerDutyInboundFieldRule = Class.create();
PagerDutyInboundFieldRule.prototype = {
    initialize: function() {
		this.json = new global.JSON();
    },

	/**
     * Get value from payload based on the payload and payload field
     * @param {String} payload from PagerDuty webhook
     * @param {String} target field on incident table
     * @return {Object} value and error message
	*/
	getValueFromPayload: function(payload, payloadField, targetField, runLookupScript, gr) {
		var me = "getValueFromPayload";

		var payloadString = String(payload).trim();
		var localPayloadField = String(payloadField).trim();

		var isSuccess = true;
		var payloadValue = "";
		var errMsg = "";
		if (gs.nil(payloadString)) {
			isSuccess = false;
			errMsg = gs.getMessage("Payload is empty");
		}

		if (gs.nil(localPayloadField)) {
			isSuccess = false;
			errMsg = gs.getMessage("Payload field is empty");
		}

		if (isSuccess) {
			// Extend the payload field to include 'payload' on the top level
			var extendedPayloadField = "payload." + localPayloadField;
			var fields = extendedPayloadField.split(".");

			var decodedPayload = this.json.decode(payloadString);
			// Extend value to set the payload to a 'payload' field to convert to a valid JSON format
			var value = {'payload' : decodedPayload };

			errMsg = gs.getMessage("Field {0} is not found on the payload.", [localPayloadField]);
			try {
				for (var i = 0; i < fields.length; i++) {
					var field = fields[i];
					// Check if the field has an array index
					var startIndex = field.indexOf("[");
					var endIndex = field.indexOf("]");
					if (startIndex == -1 && endIndex == -1) {
						// if field does not have array index,
						// check if field is an array
						if (Object.prototype.toString.call(value) === '[object Array]' ) {
							isSuccess = false;
							for (var j = 0; j < value.length; j++) {
								var entry = value[j];
								if (entry.hasOwnProperty(field)) {
									value = entry[field];
									isSuccess = true;
									break;
								}
							}
						} else {
							if (!gs.nil(value) && value.hasOwnProperty(field)) {
								value = value[field];
						} else {
								isSuccess = false;
							}
						}
					} else {
						// field has array index
						// take the array index into consideration
						var indexLength = endIndex - startIndex - 1;
						var index = parseInt(field.substr(startIndex+1, indexLength));
						var fieldArr = field.substr(0, startIndex);
						isSuccess = false;
						if (value.hasOwnProperty(fieldArr)) {
							var arrField = value[fieldArr];
							if (Object.prototype.toString.call(arrField) === '[object Array]' ) {
								if (index <= arrField.length) {
									value = arrField[index];
									isSuccess = true;
								} else {
									isSuccess = false;
									errMsg = gs.getMessage("Array index is greater than available number of elements");
								}
							}
						}
					}
					if (!isSuccess) {
						break;
					}
				}

				if (isSuccess) {
					// Lookup script
					if (runLookupScript == true && !gs.nil(value) && !gs.nil(gr)) {
						var scriptValue = this.executeScript(gr, value);
						if (typeof scriptValue == 'undefined') {
							errMsg = gs.getMessage("Execute custom lookup script result for ServiceNow incident field={0} is undefined. Return value is empty.", [targetField]);
							isSuccess = false;
						} else {
							if (!gs.nil(scriptValue)) {
								gs.debug("{0} Execute custom lookup script result for ServiceNow incident field={1} is {2}",
									 me, targetField, scriptValue);
								value = scriptValue;
							}
						}
					}
				}

				if (isSuccess) {
					payloadValue = value;
				} else {
					isSuccess = false;
					payloadValue = "";
					gs.debug(me + " " + errMsg);
				}
			} catch(err){
				isSuccess = false;
				errMsg = gs.getMessage("{0} Error for ServiceNow incident field={1}: {2}", [me, targetField, err]);
				gs.debug(errMsg);
			}
		}

		var msg = "";
		if (!isSuccess) {
			payloadValue = "";
			msg = errMsg;
		}

		return {"value" : payloadValue, "msg" : msg};
	},

	/**
     * Get values from the event and payload based on the rules
     * @param {String} event i.e. trigger, resolve
     * @param {String} payload from PagerDuty webhook
     * @return {Array of key-value pairs} array of key=target field and value
	*/
	getValuesFromPayloadBasedOnEvent: function(event, payload, target_table) {
		var me = "getValuesFromPayloadBasedOnEvent";
		var gr = new GlideRecordSecure('x_pd_integration_pagerduty_inbound_field_rule');
		gr.addQuery("active", true);
		gr.addQuery('event', event);
		gr.addQuery('incident_table_name', target_table);
		gr.orderBy('target_field');
		gr.orderByDesc('order');
		gr.query();

		var lastTargetField = "";
		var lastValue;
		var results = [];
		while (gr.next()) {
			var result;
			var currentTargetField = gr.getValue('target_field');
			var currentOrder = gr.getValue('order');
			var type = gr.getValue('type');
			if (type == "set_default_value") {
				// Data type field is used for type default value since Default Value field is a string
				var dataType = gr.getValue('data_type');
				var value;
				try {
					if (dataType == "integer") {
						value = Number(gr.getValue('default_value'));
					} else if (dataType == "decimal") {
						value = parseFloat(gr.getValue('default_value'));
					} else {
						value = String(gr.getValue('default_value'));
					}
				} catch (err) {
					gs.error("Error converting default value data type for ServiceNow incident field={0}: {1}", [currentTargetField, err]);
					value = "";
				}
				result = {"value" : value, "msg" : ""};
			} else {
				var payloadField = gr.getValue('payload_field');
				var runLookupScript = gr.getValue('run_lookup_script');
				result = this.getValueFromPayload(payload, payloadField, currentTargetField, runLookupScript, gr);
			}
			if (lastTargetField != currentTargetField && !gs.nil(lastTargetField) && !gs.nil(lastValue)) {
				results.push({"key" : lastTargetField, "value" : lastValue});
			}
			if (!gs.nil(currentTargetField) && !gs.nil(result.value) && result.value!="") {
				lastTargetField = currentTargetField;
				lastValue = result.value;
			}
		}
		if (!gs.nil(lastTargetField && !gs.nil(lastValue))) {
			results.push({"key" : lastTargetField, "value" : lastValue});
		}

		// For debugging
		//this.printArrayKeyValuePairs(results);
		return results;
	},

  /**
	 * Set target field values from payload
	 * @param {String} event Webhook event
	 * @param {Object} source 'x_pd_integration_webhook_import' record
	 * @param {Object} target 'incident' record
	 * @param {String} clientName Message channel client name
	 */
	setTargetFieldValuesFromPayload: function (event, source, target, clientName) {
    try {
		  var results = this.getValuesFromPayloadBasedOnEvent(event, source.payload, source.target_table);
		  // Set the target field
		  // if setting for a reference, the value is not a valid sys_id, it will set field to empty
		  for (var i = 0; i < results.length; i++) {
			var key = results[i].key;
			var messageChannelClient = String(source.message_channel_client);
			var isClientServiceNow = messageChannelClient.indexOf(clientName) === 0;
			if ((!gs.nil(source.message_channel_client) && !isClientServiceNow) ||
			  gs.nil(target.getValue(key)) || gs.nil(source.message_channel_client)) {
			  target.setValue(results[i].key, results[i].value);
			}
		  }
		} catch (e) {
		  gs.error('Error in setTargetFieldValuesFromPayload: ' + e);
		}
	  },
	  

	/**
     * Use for debugging to print the key value pairs from an array. Print the value to log in debug mode
     * @param {Array of key-value pairs} array of key-value pairs
	*/
	printArrayKeyValuePairs: function(arrKeyValuePairs){
		for (var i = 0; i < arrKeyValuePairs.length; i++) {
			gs.debug("printArrayKeyValuePairs entry={0}, key={1}, value={2}", i, arrKeyValuePairs[i].key, arrKeyValuePairs[i].value);
		}
	},

	/**
     * Execute the script and return the value
     * @param {GliddeRecord} rule record
     * @param {Object} value extracted from payload
     * @return {Object} value after applying lookup script
	*/
	executeScript: function(entry, value){
		if (!gs.hasRole('x_pd_integration.admin')) {
			throw new Error('Sorry, only users with [x_pd_integration.admin] role can execute PagerDuty scripts');
		}
		var evaluator = new GlideScopedEvaluator();
		evaluator.putVariable('value', value);
		evaluator.putVariable('result', undefined);
		evaluator.evaluateScript(entry, 'script');
		var result = evaluator.getVariable('result');
		if (typeof result != 'undefined') {
			return result;
		}
	},

    type: 'PagerDutyInboundFieldRule'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2017-05-25 00:21:09</sys_created_on>
        <sys_id>a3760e374f3ef60016183ce18110c798</sys_id>
        <sys_mod_count>122</sys_mod_count>
        <sys_name>PagerDutyInboundFieldRule</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_a3760e374f3ef60016183ce18110c798</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2020-09-01 12:47:55</sys_updated_on>
    </sys_script_include>
</record_update>
