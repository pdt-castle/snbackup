<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.FetchStatusUpdates</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>FetchStatusUpdates</name>
        <script><![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var FetchStatusUpdates = Class.create();
FetchStatusUpdates.prototype = {
  initialize: function () {},

  type: 'FetchStatusUpdates',

  fetchStatusUpdates: function (data) {

    var snIncidentId = data.snIncidentId;

    var incidentId = data.incidentId || getPDIncidentID(snIncidentId);

    var statusUpdates = getStatusUpdates(incidentId);

    var recordsFromDatabase = getRecordsFromDatabase(snIncidentId);

    if (statusUpdates.length > 0) {
      statusUpdates.forEach(function (statusUpdate) {
        if (!isInDatabase(statusUpdate, recordsFromDatabase)) {
          insertInStatusUpdatesTable(snIncidentId, statusUpdate);
          if (showStatusUpdateNote()) addWorkNote(snIncidentId, statusUpdate, data.isSent);
        }
      });
    }
  }
};

function getPDIncidentID (snIncidentId) {
  var incident = new GlideRecordSecure('incident');

  if (!incident.get(snIncidentId)) {
    throw new Error('You can not use this form out of context of existing incident');
  }

  if (gs.nil(incident.x_pd_integration_incident)) {
    throw new Error('Current incident is not linked to PagerDuty');
  }
  return incident.x_pd_integration_incident.toString();
}

function getStatusUpdates (incidentId) {
  var feature = 'incidents/' + incidentId + '/status_updates';
  var rest = new x_pd_integration.PagerDuty_REST();
  var params = {};
  var response = rest.getREST(feature, params);
  if (rest.hasError()) {
    throw new Error(rest.getError());
  }
  var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response)
    : response.getBody();
  var status = response.getStatusCode();
  if (status == 200) {
    var body = JSON.parse(responseBody);
    return extractStatusUpdates(body.status_updates);
  }
  return;
}

function extractStatusUpdates (statusUpdates) {
  var extractedStatusUpdates = [];
  statusUpdates.map(function (entry) {
    var author = '';
    if (entry.sender && entry.sender.summary) {
      author = entry.sender.summary;
    }
    extractedStatusUpdates.unshift({id: entry.id, message: entry.message, author: author});
  });
  return extractedStatusUpdates;
}

function getRecordsFromDatabase (snIncidentId) {
  var records = [];
  var rec = new GlideRecordSecure('x_pd_integration_pagerduty_status_updates');
  rec.addQuery('incident', snIncidentId);
  rec.query();
  while (rec.next()) {
    records.push({
      id: rec.id.toString(),
      message: rec.message.toString(),
      author: rec.author.toString()
    });
  }
  return records;
}

function isInDatabase (statusUpdate, recsFromDB) {
  var isInDatabase = false;
  if (recsFromDB.some(function (record) {
    return record.id == statusUpdate.id;
  })) isInDatabase = true;
  else if (extractLogentryRecords(recsFromDB).some(function (rec) {
    return essence(statusUpdate) == essence(rec);
  })) isInDatabase = true;
  return isInDatabase;
}

function extractLogentryRecords (records) {
  var leRecords = [];
  leRecords = records.filter(function (record) {
    if (record.id.length > 20) return true;
    return false;
  });
  return leRecords;
}

function essence (record) {
  return record.message + ':' + record.author;
}

function insertInStatusUpdatesTable (snIncidentId, statusUpdate) {
  var rec = new GlideRecordSecure('x_pd_integration_pagerduty_status_updates');
  rec.initialize();
  rec.incident = snIncidentId;
  rec.id = statusUpdate.id;
  rec.message = statusUpdate.message;
  rec.author = statusUpdate.author;
  rec.insert();
}

function showStatusUpdateNote () {
  return gs.getProperty('x_pd_integration.show_status_update_note') === 'true';
}

function addWorkNote (snIncidentId, statusUpdate, isSent) {
  var prefix = 'Status update ' + (isSent ? 'posted to' : 'received from') + ' PagerDuty:\n';
  var workNote = prefix + statusUpdate.message;
  var author = statusUpdate.author;
  if (author.length) {
    workNote = prefix + author + ': "' + statusUpdate.message + '"';
  }
  var target = new GlideRecordSecure('incident');
  target.addQuery('sys_id', snIncidentId);
  target.query();
  if (target.next()) {
    target.work_notes = x_pd_integration.WorkNotesHelper.build(workNote);
    target.update();
  }
}
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2020-03-10 13:20:35</sys_created_on>
        <sys_id>8e6ee9182f2b001068ca56e62799b642</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>FetchStatusUpdates</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_8e6ee9182f2b001068ca56e62799b642</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2020-09-01 12:46:10</sys_updated_on>
    </sys_script_include>
</record_update>
