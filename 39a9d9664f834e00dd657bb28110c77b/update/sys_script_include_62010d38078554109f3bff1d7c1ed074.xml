<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.IncidentHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>IncidentHelper</name>
        <script><![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var IncidentHelper = Class.create();
IncidentHelper.prototype = {
  // incidentId is either PD or SN incidentId
  initialize: function (incidentId) {
    this.incident = {};

    // this.incident is a GlideRecord
    this.priorityTable = 'dl_u_priority';

    if (!incidentId) {
      throw new Error('No incident id supplied to constructor of IncidentHelper');
    }

    // try to search by ServiceNow id
    var snIncidentId = incidentId;
    var gr = new GlideRecordSecure('incident');
    if (gr.get(snIncidentId)) {
      this.incident = gr;
      return;
    }
    // try to search by PagerDuty id
    var pdIncidentId = incidentId;
    gr = new GlideRecordSecure('incident');
    gr.addQuery('x_pd_integration_incident', pdIncidentId);
    gr.query();
    if (gr.next()) this.incident = gr;
    else throw new Error('Can not find an incident with pdIncidentId: ' + pdIncidentId);
  },

  getIncident: function () {
    return this.incident;
  },

  getIncidentId: function () {
    return this.incident.sys_id;
  },

  getPdIncidentId: function () {
    return '' + this.incident.x_pd_integration_incident;
  },

  getAssignmentGroupId: function () {
    var assignmentGroupId = this.incident.getValue('assignment_group');
    if (!assignmentGroupId) return null;
    return assignmentGroupId;
  },

  getSnPriorityId: function (priorityParams) {
    var impact = this.incident.impact;
    var priority = this.incident.priority;
    var urgency = this.incident.urgency;
    if (priorityParams) {
      impact = priorityParams.impact;
      priority = priorityParams.priority;
      urgency = priorityParams.urgency;
    }
    var gr;
    if (impact && priority && urgency) {
      gr = new GlideRecordSecure(this.priorityTable);
      gr.addQuery('impact', impact);
      gr.addQuery('priority', priority);
      gr.addQuery('urgency', urgency);
      gr.addActiveQuery();
      gr.query();
      if (gr.next()) {
        return '' + gr.sys_id;
      }
    } else gs.warn('No impact/priority/urgency in IncidentHelper.getSnPriorityId()');
    return null;
  },

  type: 'IncidentHelper',
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2020-05-25 15:16:44</sys_created_on>
        <sys_id>62010d38078554109f3bff1d7c1ed074</sys_id>
        <sys_mod_count>53</sys_mod_count>
        <sys_name>IncidentHelper</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_62010d38078554109f3bff1d7c1ed074</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2020-09-01 12:46:24</sys_updated_on>
    </sys_script_include>
</record_update>
