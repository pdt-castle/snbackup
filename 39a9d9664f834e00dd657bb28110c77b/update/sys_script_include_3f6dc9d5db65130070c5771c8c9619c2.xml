<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_pd_integration.TaskEntityHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Class helper for varius Task based entities</description>
        <name>TaskEntityHelper</name>
        <script><![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var TaskEntityHelper = Class.create();

TaskEntityHelper.isTaskHasResolvedState = function (taskType, state) {
  taskType = taskType.toString();
  state = parseInt(state);
  var typesStatesMap = {
    incident: [6, 7, 8],
    sn_si_incident: [3, 7, 100],
    change_request: [0, 3, 4] //review closed canceled
  };
  return typesStatesMap[taskType].indexOf(state) !== -1;
};

TaskEntityHelper.resolvedStateValue = function (taskType) {
  taskType = taskType.toString();
  var resolveValues = {
    incident: gs.getProperty('x_pd_integration.resolved_state_value', 6), //resolved
    sn_si_incident: gs.getProperty('x_pd_integration.sn_si_resolved_state_value', 100), //review
    change_request: 0 //review
  };
  return resolveValues[taskType];
};

TaskEntityHelper.triggerStateValue = function (taskType) {
  taskType = taskType.toString();
  var triggerValues = {
    incident: 1, //new
    sn_si_incident: 10, //draft
    change_request: -5 //new
  };
  return triggerValues[taskType];
};

TaskEntityHelper.getPdId = function (task, taskType) {
  taskType = taskType ? taskType.toString() : task.sys_class_name.toString();
  if (taskType === 'incident') {
    return task.x_pd_integration_incident;
  } else {
    return task.x_pd_integration_incident_id;
  }
};

TaskEntityHelper.setPdId = function (task, value, taskType) {
  taskType = taskType ? taskType.toString() : task.sys_class_name.toString();
  gs.debug('TaskEntityHelper.setPdId {0} {1} value: {2}', task.number, taskType, value);
  if (taskType === 'incident') {
    task.x_pd_integration_incident = value;
  } else {
    task.x_pd_integration_incident_id = value;
  }
};

TaskEntityHelper.getPdIdField = function (taskType) {
  taskType = taskType.toString();
  if (taskType === 'incident') {
    return 'x_pd_integration_incident';
  } else {
    return 'x_pd_integration_incident_id';
  }
};

TaskEntityHelper.setPriority = function (task, priorityObj, taskType) {
  taskType = taskType ? taskType.toString() : task.sys_class_name.toString();

  if (taskType === 'incident') {
    task.impact = priorityObj.impact;
    task.urgency = priorityObj.urgency;
  } else {
    task.priority = priorityObj.priority;
  }
  var user = gs.getUserName();
  task.work_notes = x_pd_integration.WorkNotesHelper.build('Priority set to ' + priorityObj.priority_display + ' from PagerDuty by ' + user);
};

TaskEntityHelper.isPdWebhook = function () {
  var integrationUser = gs.getProperty('x_pd_integration.sn_auth_user');
  var currentUser = gs.getUserName();
  return currentUser === integrationUser || currentUser === 'system';
};

TaskEntityHelper.prototype = {
  initialize: function (task, taskType) {
    this.taskType = taskType || task.sys_class_name;
    this.task = task;
  },

  isTaskHasResolvedState: function (state) {
    return TaskEntityHelper.isTaskHasResolvedState(this.taskType, state);
  },

  resolvedStateValue: function () {
    return TaskEntityHelper.resolvedStateValue(this.taskType);
  },

  triggerStateValue: function () {
    return TaskEntityHelper.triggerStateValue(this.taskType);
  },

  getPdId: function () {
    return TaskEntityHelper.getPdId(this.task, this.taskType);
  },

  setPdId: function (value) {
    return TaskEntityHelper.setPdId(this.task, value, this.taskType);
  },

  getPdIdField: function () {
    return TaskEntityHelper.getPdIdField(this.taskType);
  },

  setPriority: function (priorityObj) {
    return TaskEntityHelper.setPriority(this.task, priorityObj, this.taskType);
  }
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2018-04-17 14:50:20</sys_created_on>
        <sys_id>3f6dc9d5db65130070c5771c8c9619c2</sys_id>
        <sys_mod_count>44</sys_mod_count>
        <sys_name>TaskEntityHelper</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_3f6dc9d5db65130070c5771c8c9619c2</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2018-06-04 13:51:49</sys_updated_on>
    </sys_script_include>
</record_update>
