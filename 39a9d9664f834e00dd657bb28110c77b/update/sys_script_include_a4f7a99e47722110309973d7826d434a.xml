<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.PdWebhookTransformAction</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Transformation script for Workflow actions</description>
        <name>PdWebhookTransformAction</name>
        <script>/*** Changes made to this script are not supported by PagerDuty ***/
var PdWebhookTransformAction = (function () {
  var taskHelper = new x_pd_integration.TaskEntityHelper(target, source.getValue('target_table'));
  var SERVICENOW_CLIENT_NAME = 'ServiceNow';
  function tryTransform () {
    try {
      if (action === 'insert') {
        webhookTransform();
        runInboundFieldRules();
        runCustomFieldsDataSynchronization();
      } else {
        ignore = true;
      }
    } catch (err) {
      gs.error('Error in PdWebhookTransformAction: ' + err);
    }
  }

  function webhookTransform () {
    try {
      var assignmentsSummary = parseAssignmentsSummary(source);
      var newGroupSysId;

      gs.debug('Transform: {0} {1} action on incident {2}', source.getValue('message_type'), action, target.getDisplayValue());
      var assignOnAckOnly = gs.getProperty('x_pd_integration.assign_on_ack_only');
      gs.debug('assignOnAckOnly=' + assignOnAckOnly);

      if (source.getValue('message_type') === 'incident.action.trigger') {
        gs.debug('webhookTransform incident.action.trigger insert for incident {0}', source.getValue('id'));

        taskHelper.setPdId(source.getValue('id'));

        target.short_description = 'PagerDuty: ' + source.getValue('subject');
        if (showIncidentTriggeringNote()) {
          target.work_notes = x_pd_integration.WorkNotesHelper.build('PagerDuty incident was triggered for nonexistent incident, new incident created');
        }
        target.x_pd_integration_incident_key = source.getValue('incident_key');

        newGroupSysId = getGroupSysIdFromEscalationPolicyId(source);
        if (!gs.nil(newGroupSysId)) {
          target.setValue('assignment_group', newGroupSysId);
        }

        if (!gs.nil(source.getValue('service_id')) &amp;&amp; gs.nil(source.getValue('ci_sys_id'))) {
          target.setValue('cmdb_ci', getCISysID(source.getValue('service_id')));
        }

        if (!gs.nil(source.getValue('ci_sys_id'))) {
          target.setValue('cmdb_ci', source.getValue('ci_sys_id'));
        }

        syncIncPriority();

        // If the status is acknowledged or someone is assigned and acknowledge flag is false,
        // set the Assigned To field to incident
        if (!gs.nil(source.getValue('assigned_to_pd_id')) &amp;&amp; (source.getValue('status') === 'acknowledged' || assignOnAckOnly === 'false')) {
          var assignToUser = getUserByPDID(source.getValue('assigned_to_pd_id'));
          if (gs.nil(assignToUser)) {
            gs.debug(
              'PagerDuty incident {0} was assigned to {1}, but could not find user by PagerDuty ID {2}',
              target.getDisplayValue(), assignmentsSummary, source.getValue('assigned_to_pd_id')
            );
            if (showIncidentAssignmentNote()) {
              target.work_notes = x_pd_integration.WorkNotesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
                ', but ServiceNow could not locate user with PagerDuty ID \'' + source.getValue('assigned_to_pd_id') + '\' to assign the incident to them');
            }
            return;
          }
          // We have a valid user but we need to check if the user belongs to the assignment group of the incident
          // Or ServiceNow will throw an error due to system Business Rule
          if (!gs.nil(newGroupSysId)) {
            var newGroupName = getGroupName(newGroupSysId);
            var allGroupMembersIds = getGroupMemberIds(newGroupSysId);
            if (!allGroupMembersIds.hasOwnProperty(assignToUser.getUniqueValue())) {
              target.assigned_to = '';
              gs.debug(
                'PagerDuty incident {0} was assigned to {1}, but this user does not belong to the assignment group {2} of the incident',
                target.getDisplayValue(), assignToUser.getDisplayValue(), newGroupName
              );
              if (showIncidentAssignmentNote()) {
                target.work_notes = x_pd_integration.WorkNotesHelper.build('PagerDuty incident was assigned to the ' + newGroupName +
                ' assignment group, but the assignee field is cleared because the target user in' +
                ' PagerDuty is not present in the ' + newGroupName + ' assignment group');
              }
              return;
            }
          }
          gs.debug(
            'PagerDuty incident {0} was assigned to {1}',
            target.getDisplayValue(), assignToUser.getDisplayValue()
          );
          if (showIncidentAssignmentNote()) {
            target.work_notes = x_pd_integration.WorkNotesHelper.build('PagerDuty incident was assigned to the user ' +
            assignToUser.getValue('name'));
          }
          target.assigned_to = assignToUser.getUniqueValue();
        }
        return;
      }
    } catch (e) {
      gs.error('PdWebhookTransformAction, webhookTransform error: {0}', e);
    }
  }

  function getGroupName (sysId) {
    if (!sysId) {
      return '';
    }
    var gr = new GlideRecordSecure('sys_user_group');
    if (gr.get(sysId)) {
      return gr.getValue('name');
    }
    return '';
  }

  /**
   * @param {String} groupId a sys_id of an assignment group
   * @returns {Object} a hash of group member sys_ids
   */
  function getGroupMemberIds (groupId) {
    var ids = {};
    var gr = new GlideRecordSecure('sys_user_grmember');
    gr.addQuery('group', groupId);
    gr.query();
    while (gr.next()) {
      ids[String(gr.user)] = true;
    }
    return ids;
  }

  function runInboundFieldRules () {
    var eventMap = {
      'incident.action.trigger': 'trigger'
    };
    var event = eventMap[source.getValue('message_type')];

    if (event) {
      var pifr = new x_pd_integration.PagerDutyInboundFieldRule();
      pifr.setTargetFieldValuesFromPayload(event, source, target, SERVICENOW_CLIENT_NAME);
    }
  }

  function runCustomFieldsDataSynchronization () {
    var processor = new x_pd_integration.PagerDutyCustomFieldsInboundSync();

    // decode payload and get custom fields
    var decodedPayload = JSON.parse(source.getValue('payload'));
    var customFields = decodedPayload.data.custom_fields || [];
    var event = {
      data: {
        incident: {id: decodedPayload.data.id},
        custom_fields: customFields,
        changed_custom_fields: customFields
      }
    };

    var result = processor.processCustomFieldValuesUpdated(target, event);
    gs.info('Run CustomFields data synchronization for PagerDuty incident {0} with result {1}', target.getDisplayValue(), result);
  }

  function getUserByPDID (pd_id) {
    var gr = new GlideRecordSecure('sys_user');
    if (gr.get('x_pd_integration_pagerduty_id', pd_id)) {
      gs.debug('Webhook transform found user {0} for PageDuty ID {1}', gr.getDisplayValue(), pd_id);
      return gr;
    }
    gs.debug('Webhook transform could not find user for PagerDuty ID {0}', pd_id);
    return null;
  }

  function getCISysID (serviceID) {
    var gr = new GlideRecordSecure('cmdb_ci');
    if (gr.get('x_pd_integration_pagerduty_service', serviceID)) {
      return gr.getValue('sys_id');
    }
    return null;
  }

  function getIncidentPriority (inc_id) {
    var gr = new GlideRecordSecure(source.getValue('target_table'));
    gr.addQuery(taskHelper.getPdIdField(), inc_id);
    gr.query();
    if (gr.next()) {
      return gr.priority;
    }
    return null;
  }

  function getGroupSysIdFromEscalationPolicyId (source) {
    if (gs.nil(source.getValue('escalation_policy_id'))) {
      return null;
    }

    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    return epHelper.getAssignmentGroupIdWithPriority(source.getValue('escalation_policy_id'), source.getValue('priority_id'));
  }

  function syncIncPriority (checkPriorityChanges) {
    if (!gs.nil(source.getValue('priority_id'))) {
      var tr_priority;
      var db_priority;
      var pd = new x_pd_integration.PagerDuty();
      var iuObj = pd.getImpactUrgencyById(source.getValue('priority_id'));

      if (checkPriorityChanges) {
        db_priority = getIncidentPriority(source.getValue('id'));
        if (!gs.nil(iuObj) &amp;&amp; iuObj.hasOwnProperty('priority')) {
          tr_priority = iuObj.priority;
        }
      }

      if (!checkPriorityChanges || (db_priority !== tr_priority &amp;&amp; !gs.nil(db_priority) &amp;&amp; !gs.nil(tr_priority))) {
        if (!gs.nil(iuObj) &amp;&amp; iuObj.hasOwnProperty('impact') &amp;&amp; iuObj.hasOwnProperty('urgency')) {
          taskHelper.setPriority(iuObj);
          gs.debug('webhookTransform Impact: {0}, Urgency: {1}', iuObj.impact, iuObj.urgency);
        }
      }
    }
  }

  function showIncidentTriggeringNote () {
    return gs.getProperty('x_pd_integration.show_incident_triggering_note') === 'true';
  }

  function showIncidentAssignmentNote () {
    return gs.getProperty('x_pd_integration.show_incident_assignment_note') === 'true';
  }

  function parseAssignmentsSummary (source) {
    var payload = JSON.parse(source.getValue('payload'));
    var assignments = payload.data &amp;&amp; payload.data.assignments;
    var assignmentsSummary = [];
    if (assignments) {
      assignments.forEach(function (item) {
        assignmentsSummary.push(item.assignee.summary);
      });
    }
    assignmentsSummary.splice(-2, 2, assignmentsSummary.slice(-2).join(' and '));
    return assignmentsSummary.join(', ');
  }

  return {tryTransform: tryTransform};
})();
</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2023-05-16 12:19:50</sys_created_on>
        <sys_id>a4f7a99e47722110309973d7826d434a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PdWebhookTransformAction</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_a4f7a99e47722110309973d7826d434a</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2023-05-16 12:19:50</sys_updated_on>
    </sys_script_include>
</record_update>
