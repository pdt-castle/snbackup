<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_pd_integration.PagerDutyInboundWorkflowActions</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>/*** Changes made to this script are not supported by PagerDuty ***/&#13;
Inbound processor handler for PagerDuty webhook callback for Workflow Actions&#13;
</description>
        <name>PagerDutyInboundWorkflowActions</name>
        <script><![CDATA[/** * Changes made to this script are not supported by PagerDuty ** */
var PagerDutyInboundWorkflowActions = Class.create();
PagerDutyInboundWorkflowActions.prototype = {
  initialize: function () {
    this.JSON = new global.JSON();
    this.importTable = 'x_pd_integration_webhook_import';
    this.sn2pdMappingCIAG = 'Configuration Items and Assignment Groups map to PagerDuty';
    this.sn2pdMappingAG = 'Assignment Groups map to PagerDuty';
    this.sn2pdMapping = gs.getProperty('x_pd_integration.sn2pd_mapping');
    this.baseURL = gs.getProperty('glide.servlet.uri');
  },

  /**
   * Process Workflow Action Inbound request from PagerDuty
   * @param {Object} data - the request payload
   * @param {Object} queryParams - the request query parameters
   * @return {Object} - the serviecenow incident information (number and URL)
   */
  processAction: function (data, queryParams) {
    if (data.event === 'incident.action.trigger') {
      var importRow = this.processIncidentAction(data, queryParams);
      // Return information about the associated servicenow incident
      if (importRow) {
        var grIncident = new GlideRecordSecure('incident');
        grIncident.addQuery('x_pd_integration_incident', importRow.id);
        grIncident.setLimit(1);
        grIncident.query();
        if (grIncident.next()) {
          return {
            incident: {
              number: grIncident.getValue('number'),
              URL: this.baseURL + 'nav_to.do?uri=' + grIncident.getLink(true)
            }
          };
        }
        gs.error('Process Workflow Action webhook: could not find incident with x_pd_integration_incident={0}', importRow.id);
      }
    } else {
      gs.debug('Process Workflow Action webhook type={0} not supported', data.event);
    }
    return {};
  },

  processIncidentAction: function (message, queryParams) {
    try {
      var type = message.event;
      var incidentData = message.data;

      var importRow = new GlideRecordSecure(this.importTable);
      importRow.incident_key = incidentData.incident_key;
      importRow.id = incidentData.id;
      if (queryParams.task_type && queryParams.task_type.length) {
        importRow.target_table = queryParams.task_type[0];
      } else {
        importRow.target_table = 'incident';
      }

      importRow.note = 'workflow action';
      importRow.username = 'PagerDuty Workflow Action';
      importRow.timestamp = incidentData.created_at;
      importRow.subject = incidentData.title;

      if (this.sn2pdMapping === this.sn2pdMappingCIAG && type === 'incident.action.trigger') {
        importRow.service_name = incidentData.service.summary;
        importRow.service_id = incidentData.service.id;
      }

      var assigneeName;
      var assignments = incidentData.assignments;
      if (assignments.length > 0) {
        assignments.sort(function (a, b) {
          if (a.at && b.at) return a.at.localeCompare(b.at);
        });
        var assignee = assignments[assignments.length - 1].assignee;
        assigneeName = assignee.summary;
        importRow.assigned_to_name = assigneeName;
        importRow.assigned_to_pd_id = assignee.id;
      }

      importRow.message_type = type;
      importRow.status = incidentData.status;
      importRow.url = incidentData.html_url;
      importRow.pagerduty_number = incidentData.incident_number;

      if (!gs.nil(incidentData.last_status_change_by)) {
        importRow.updated_by_name = incidentData.last_status_change_by.summary;
        var last_status_type = incidentData.last_status_change_by.type;
        if (last_status_type === 'user_reference') {
          importRow.updated_by_pd_id = incidentData.last_status_change_by.id;
        }
      }

      if (queryParams.group && queryParams.group.length &&
          !gs.nil(incidentData.priority) && type === 'incident.action.trigger') {
        var ep = this.getGroupEscalationPolicy(queryParams.group[0], incidentData.priority);
        importRow.escalation_policy = ep.name;
        importRow.escalation_policy_id = ep.id;
      }

      if (queryParams.ci && queryParams.ci.length && type === 'incident.action.trigger') {
        importRow.ci_sys_id = queryParams.ci[0];
      }

      if (!gs.nil(incidentData.escalation_policy) && gs.nil(importRow.escalation_policy_id)) {
        importRow.escalation_policy = incidentData.escalation_policy.summary;
        importRow.escalation_policy_id = incidentData.escalation_policy.id;
      }

      importRow.message_channel_client = 'PagerDuty Workflow Action';

      if (!gs.nil(incidentData.priority) && incidentData.priority.hasOwnProperty('id')) {
        importRow.priority_id = incidentData.priority.id;
      }

      importRow.setValue('payload', this.JSON.encode(message));
      importRow.insert();
      gs.debug('processIncidentAction inserted import row {0}', importRow.getDisplayValue());
      return importRow;
    } catch (e) {
      gs.error('PagerDutyInboundWorkflowActions.processIncidentAction error: {0}', e);
    }
    return null;
  },

  /**
   * Get an escalation policy given an assignment group and a priority
   * @param {String} groupName - the assignment group name
   * @param {Object} priority - the priority of the incident
   * @return {Object} the group's escalation policy id and name - {id: <id>, name: <name>}
   */
  getGroupEscalationPolicy: function (groupName, priority) {
    var agId;
    var gr = new GlideRecordSecure('sys_user_group');
    gr.addQuery('name', groupName);
    gr.addActiveQuery();
    gr.query();
    if (gr.next()) {
      agId = gr.getValue('sys_id');
    }

    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    var snPriId = epHelper.convertPriToSn(priority.id);
    var pdEpId = epHelper.getPDEscalationPolicyIdWithPriority(agId, snPriId);
    var pdEpName = epHelper.getEpNameById(pdEpId);
    return {id: pdEpId, name: pdEpName};
  },

  type: 'PagerDutyInboundWorkflowActions'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2023-04-20 14:30:26</sys_created_on>
        <sys_id>a99ccc8697922110b21577d71153afed</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>PagerDutyInboundWorkflowActions</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_a99ccc8697922110b21577d71153afed</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2023-04-20 14:31:19</sys_updated_on>
    </sys_script_include>
</record_update>
