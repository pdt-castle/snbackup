<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.StatusUpdateController</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>StatusUpdateController</name>
        <script>/*** Changes made to this script are not supported by PagerDuty ***/
var StatusUpdateController = x_pd_integration.AjaxHelper.createAjaxController({
  type: 'StatusUpdateController',

  fetchImpactedBusinessServices: function fetchImpactedBusinessServices (snIncidentId) {
    var incidentId = getPDIncidentID(snIncidentId);
    var impactedBusinessServices = getImpactedServices(incidentId);
    var allBusinessServices = getAllBusinessServices();
    var impactedServicesIds = {};
    if (impactedBusinessServices) {
      impactedBusinessServices.forEach(function (impactedService) {
        impactedServicesIds[impactedService.id] = true;
      });
    }
    return {
      items: impactedBusinessServices,
      allBusinessServices: allBusinessServices,
      impactedServices: impactedBusinessServices,
      impactedServicesIds: impactedServicesIds,
      warnMessage: warnMessages.join('&lt;br /&gt;')
    };
  },

  suggestBusinessServices: function suggestBusinessServices (text, allBusinessServices) {
    return {items: allBusinessServices};
  },

  sendStatusUpdate: function sendStatusUpdate (payload) {
    var incidentId = getPDIncidentID(payload.snIncidentId);
    var messagesToDisplay = [];

    var servicesWereUpdated = setImpactedServices(payload, incidentId);
    if (servicesWereUpdated) {
      messagesToDisplay.push('Impacted Business Services list was updated.');
    } else {
      messagesToDisplay.push('Impacted Business Services list was &lt;b&gt;not&lt;/b&gt; updated.');
    }

    var messageWasSent = sendMessage(payload, incidentId);
    if (messageWasSent) {
      messagesToDisplay.push('Status update message was sent.');
    } else {
      messagesToDisplay.push('Empty message was &lt;b&gt;not&lt;/b&gt; sent.');
    }

    return {
      incidentId: incidentId,
      message: messagesToDisplay.join(' '),
      messageWasSent: messageWasSent
    };
  },

  fetchStatusUpdates: function fetchStatusUpdates (payload) {
    var FetchStatusUpdates = new x_pd_integration.FetchStatusUpdates();
    FetchStatusUpdates.fetchStatusUpdates(payload);
    return {
      message: 'Status update was fetched.'
    };
  }

});

var warnMessages = [];

var getHeaderString = function () {
  return 'X-EARLY-ACCESS: business-impact-early-access';
};


var getIncident = function (snIncidentId) {
  var incident = new GlideRecordSecure('incident');
  if (!incident.get(snIncidentId)) {
    throw new Error('You can not use this form out of context of existing incident');
  }
  return incident;
};


var getPDIncidentID = function (snIncidentId) {
  var incident = getIncident(snIncidentId);
  if (gs.nil(incident.x_pd_integration_incident)) {
    throw new Error('Current incident is not linked to PagerDuty');
  }
  return incident.x_pd_integration_incident.toString();
};

var getImpactedServices = function (incidentId) {
  var impactedServicesFormatted = [];
  var impactedServices = [];
  var feature = 'incidents/' + incidentId + '/business_services/impacts';

  var field = 'services';
  try {
    var body = getREST(feature, getHeaderString());
    if (body[field] &amp;&amp; Array.isArray(body[field])) {
      impactedServices = body[field];

      var paginatedImpactedServices = paginateCursorBased(feature, body, field, getHeaderString());
      impactedServices = impactedServices.concat(paginatedImpactedServices);

      if (impactedServices) {
        impactedServices.forEach(function (impactedService) {
          var text = impactedService.name || impactedService.id;
          impactedServicesFormatted.push({id: impactedService.id, text: text});
        });
      }
    }
  } catch (e) {
    return [{id: 1, text: e.toString()}];
  }

  return impactedServicesFormatted;
};


var paginateCursorBased = function (feature, body, field, headerString) {
  var paginatedItems = [];
  var safetyCounter = 0;
  while (body &amp;&amp; body.next_cursor) {
    if (safetyCounter &gt; 400) break;
    safetyCounter++;
    body = getREST(feature + '?cursor=' + body.next_cursor + '&amp;limit=' + body.limit, headerString);
    if (body[field]) {
      paginatedItems = paginatedItems.concat(body[field]);
    }
  }
  return paginatedItems;
};


var getAllBusinessServices = function () {
  var allBusinessServices = [];
  var feature = 'business_services';
  var responseBody = getREST(feature);
  if (responseBody.business_services) {
    responseBody.business_services.forEach(function (bs) {
      allBusinessServices.push({id: bs.id, text: bs.name});
    });
  }
  var paginatedBusinessServices = paginateBusinessServices(responseBody, feature);
  return allBusinessServices.concat(paginatedBusinessServices);
};


var paginateBusinessServices = function (responseBody, feature) {
  var paginatedBS = [];
  var safetyCounter = 0;
  while (responseBody &amp;&amp; responseBody.more) {
    if (safetyCounter &gt; 100) break;
    safetyCounter++;
    var offset = responseBody.offset + responseBody.limit;
    responseBody = getREST(feature + '?limit=' + responseBody.limit + '&amp;offset=' + offset);
    if (responseBody.business_services) {
      responseBody.business_services.forEach(function (bs) {
        paginatedBS.push({id: bs.id, text: bs.name});
      });
    }
  }
  return paginatedBS;
};


var sendMessage = function (payload, incidentId) {
  var messageWasSent = false;
  var messageToSend = payload.message.trim();
  if (messageToSend.length) {
    var resp = postREST({
      body: {message: messageToSend},
      currentUserId: payload.currentUserId,
      path: 'incidents/' + incidentId + '/status_updates'
    });
    messageWasSent = true;
  }
  return messageWasSent;
};


var setImpactedServices = function (payload, incidentId) {
  var impactedServicesIds = payload.impactedServicesIds;
  var chosenServicesIds = {};

  var allBusinessServices = {};
  payload.allBusinessServices.forEach(function (businessService) {
    allBusinessServices[businessService.id] = businessService.text;
  });

  var servicesWereUpdated = false;
  var servicesBeingSet = [];
  var servicesBeingUnset = [];

  payload.chosenServicesIds.forEach(function (chosenServiceId) {
    chosenServicesIds[chosenServiceId] = true;
    if (impactedServicesIds[chosenServiceId]) return;
    putREST({
      body: {relation: 'impacted'},
      currentUserId: payload.currentUserId,
      headerString: getHeaderString(),
      path: 'incidents/' + incidentId + '/business_services/' + chosenServiceId + '/impacts'
    });
    servicesWereUpdated = true;
    servicesBeingSet.push(allBusinessServices[chosenServiceId]);
  });

  Object.keys(payload.impactedServicesIds).forEach(function (impactedServiceId) {
    if (chosenServicesIds[impactedServiceId]) return;
    putREST({
      body: {relation: 'not_impacted'},
      currentUserId: payload.currentUserId,
      headerString: getHeaderString(),
      path: 'incidents/' + incidentId + '/business_services/' + impactedServiceId + '/impacts'
    });
    servicesWereUpdated = true;
    servicesBeingUnset.push(allBusinessServices[impactedServiceId]);
  });

  updateIncidentTimeline(payload, servicesBeingSet, servicesBeingUnset);
  return servicesWereUpdated;
};


var updateIncidentTimeline = function (payload, servicesBeingSet, servicesBeingUnset) {
  var separator = '\n - ';
  var workNote = '';
  if (servicesBeingSet.length) {
    var pluralSet = 's become ';
    if (servicesBeingSet.length === 1) {
      pluralSet = ' becomes ';
    }
    workNote += 'The following Business Service' + pluralSet + 'impacted by the current incident:' +
      separator +
      servicesBeingSet
        .sort(function (a, b) {
          return a.toLowerCase().localeCompare(b.toLowerCase());
        })
        .join(separator);
  }
  if (servicesBeingUnset.length) {
    if (workNote.length) {
      workNote += '\n\n';
    }
    var pluralUnset = 's are no longer ';
    if (servicesBeingUnset.length === 1) {
      pluralUnset = ' is no longer ';
    }
    workNote += 'The following Business Service' + pluralUnset + 'impacted by the current incident:' +
      separator +
      servicesBeingUnset
        .sort(function (a, b) {
          return a.toLowerCase().localeCompare(b.toLowerCase());
        })
        .join(separator);
  }
  if (showStatusUpdateNote()) {
    addWorkNote(payload.snIncidentId, workNote);
  }
};

var showStatusUpdateNote = function () {
  return gs.getProperty('x_pd_integration.show_status_update_note') === 'true';
};

var addWorkNote = function (snIncidentId, note) {
  var incident = new GlideRecordSecure('incident');
  if (!incident.get(snIncidentId)) {
    throw new Error('You can not use this form out of context of existing incident.');
  }
  if (!note) {
    return;
  }
  incident.work_notes = x_pd_integration.WorkNotesHelper.build(note);
  incident.update();
};

var getREST = function (path, headerString) {
  var rest = new x_pd_integration.PagerDuty_REST();

  if (headerString) rest.customHeaders += '\n' + headerString;

  var result = rest.getREST(path);

  if (rest.hasError()) {
    throw new Error(rest.getError());
  }

  if (result.haveError()) {
    throw new Error(result.getErrorMessage() + '. Details from PagerDuty API: ' + result.getBody());
  }

  var responseBody = JSON.parse(result.getBody());
  return responseBody;
};


var postREST = function (args) {
  var rest = new x_pd_integration.PagerDuty_REST();
  var feature = args.path;
  var body = args.body;
  var pd = new x_pd_integration.PagerDuty();
  var currentPdUserId = pd.getUserIDFromFieldData(args.currentUserId, 'sys_id', true);
  var from = pd.getUserEmailByPDID(currentPdUserId);
  var result = rest.postREST(feature, body, from);

  if (rest.hasError()) {
    throw new Error(rest.getError());
  }

  if (result.haveError()) {
    throw new Error('' + result.getErrorMessage() + '. Details from PagerDuty API: ' + result.getBody());
  }

  var responseBody = JSON.parse(result.getBody());
  return responseBody;
};

var putREST = function (args) {
  var rest = new x_pd_integration.PagerDuty_REST();

  if (args.headerString) rest.customHeaders += '\n' + args.headerString;

  var feature = args.path;
  var body = args.body;
  var pd = new x_pd_integration.PagerDuty();
  var currentPdUserId = pd.getUserIDFromFieldData(args.currentUserId, 'sys_id', true);
  var from = pd.getUserEmailByPDID(currentPdUserId);
  var result = rest.putREST(feature, body, from);

  if (rest.hasError()) {
    throw new Error(rest.getError());
  }

  if (result.haveError()) {
    throw new Error('' + result.getErrorMessage() + '. Details from PagerDuty API: ' + result.getBody());
  }

  var responseBody = JSON.parse(result.getBody());
  return responseBody;
};
</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2020-03-04 11:26:37</sys_created_on>
        <sys_id>eda99216db5f001036b9f53a29961988</sys_id>
        <sys_mod_count>338</sys_mod_count>
        <sys_name>StatusUpdateController</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_eda99216db5f001036b9f53a29961988</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2020-11-03 14:52:59</sys_updated_on>
    </sys_script_include>
</record_update>
