<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_script">
    <sys_transform_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <map display_value="PagerDuty Responder Requests">350d5bf09752dd10474470700153afbe</map>
        <order>100</order>
        <script><![CDATA[(function runTransformScript (source, map, log, target /*undefined onStart*/) {
  var notesHelper = x_pd_integration.WorkNotesHelper;

  try {
    var user = getValidRecord(source.assigned_to);
    var group = getValidRecord(source.assignment_group);

    if (action === 'insert') {
      if (notesHelper.isEnabled('show_responder_request_related_notes')) {
        addWorkNote(source, buildNote(source, user, group));
      }
    } else if (action === 'update') {
      if (String(source.message) !== String(target.message) ||
        String(source.state) !== String(target.state)) {
        if (notesHelper.isEnabled('show_note_with_responder_response')) {
          addWorkNote(source, buildNote(source, user, group));
        }
      }
    }
  } catch (e) {
    gs.error('Error in PagerDuty Responder Requests transform script: ' + e.message);
  }

  function addIsHas (message) {
    var ing = /ing$/;
    var ed = /ed$/;
    if (ing.test(message)) {
      return 'is ' + message;
    } else if (ed.test(message)) {
      return 'has ' + message;
    }
    return message;
  }

  function addWorkNote (source, message) {
    var incident = getValidRecord(source.incident);
    if (incident) {
      incident.work_notes = notesHelper.build(message);
      incident.update();
    }
  }

  function buildNote (source, user, group) {
    var userName = 'unknown user';
    if (user) {
      userName = user.name;
    }

    var groupName = '';
    if (group) {
      groupName = group.name;
    }

    var groupMessage = '';
    if (groupName) {
      groupMessage = ' as a member of the ' + groupName + ' assignment group';
    }

    var withMessage = ' with no message';
    var sourceMessage = String(source.message);
    if (sourceMessage) {
      withMessage = ' with a message: ' + sourceMessage;
    }

    var sourceState = String(source.state);
    var state = addIsHas(sourceState.toLowerCase());
    var message = userName + groupMessage + ' ' + state + ' the responder request' + withMessage;

    if (sourceState === 'Pending') {
      message = userName + ' was added as a responder via PagerDuty';
    }
    return capitalizeFirstLetter(message);
  }

  function capitalizeFirstLetter (string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  function getValidRecord (reference) {
    if (!reference) {
      return;
    }
    var record = reference.getRefRecord();
    if (record.isValidRecord()) {
      return record;
    }
  }

})(source, map, log, target);
]]></script>
        <sys_class_name>sys_transform_script</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2022-10-06 09:57:39</sys_created_on>
        <sys_id>9da63176879a191092fa0fec0ebb359e</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>onBefore</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_transform_script_9da63176879a191092fa0fec0ebb359e</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2022-10-11 14:24:18</sys_updated_on>
        <when>onBefore</when>
    </sys_transform_script>
</record_update>
