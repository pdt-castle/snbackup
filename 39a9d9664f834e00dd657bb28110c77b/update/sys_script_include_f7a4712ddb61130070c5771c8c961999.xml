<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.PdWebhookTransform</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>PdWebhookTransform</name>
        <script>/*** Changes made to this script are not supported by PagerDuty ***/
/****
 * For variables go to: http://wiki.service-now.com/index.php?title=Import_Sets
 **/

var PdWebhookTransform = (function () {
  var notesHelper = x_pd_integration.WorkNotesHelper;
  var taskHelper = new x_pd_integration.TaskEntityHelper(target, source.target_table);

  var serviceNowClientName = 'ServiceNow';
  var insertWorkNote = 'PagerDuty incident was triggered for nonexistent incident, new incident created';

  function tryTransform () {
    try {
      webhookTransform();
      // Dynamic field mapping
      runDynamicFieldMapping(source.message_type, current.payload);
      // Call customizable script
      runCustomScript();
    } catch (err) {
      gs.error('Error in WebhookTransform: ' + err);
    }
  }

  function webhookTransform () {
    try {
      var assignmentsSummary = parseAssignmentsSummary(source);
      var newGroupSysId;

      gs.debug('Transform: {0} {1} action on incident {2}', source.message_type, action, target.getDisplayValue());
      var assignOnAckOnly = gs.getProperty('x_pd_integration.assign_on_ack_only');
      gs.debug('assignOnAckOnly=' + assignOnAckOnly);

      // eslint-disable-next-line es5/no-es6-methods
      var isClientServiceNow = String(source.message_channel_client).startsWith(serviceNowClientName);

      //ignore if pagerduty message channel client is ServiceNow; this event originally comes from ServiceNow
      if (!gs.nil(source.message_channel_client) &amp;&amp; (isClientServiceNow) &amp;&amp; (source.message_type == 'incident.resolve')) {
        ignore = true;
        gs.debug('Transform: ignore {0} since the event originally comes from ServiceNow', source.message_type);
        return;
      }

      if (source.message_type == 'incident.trigger') {
        if (action == 'update') {
          var shouldAddWorkNote = target.work_notes &amp;&amp; target.work_notes.indexOf(insertWorkNote) &gt;= 0;
          gs.debug('webhookTransform incident.trigger update for incident {0}', source.id);
          taskHelper.setPdId(source.id);

          //Ent v3.1 populate incident_key as well as id
          target.x_pd_integration_incident_key = source.incident_key;

          if (shouldAddWorkNote &amp;&amp; notesHelper.isEnabled('show_incident_triggering_note')) {
            target.work_notes = notesHelper.build('PagerDuty incident was triggered and will notify ' + assignmentsSummary);
          }

          //look for change in priority
          syncIncPriority(true);

          //don't assign incident is configured to only assign on acknowledgement
          if (assignOnAckOnly == 'true') {
            gs.debug('PagerDuty has assigned incident {0} to {1}', target.getDisplayValue(), assignmentsSummary);
            if (shouldAddWorkNote &amp;&amp; notesHelper.isEnabled('show_incident_assignment_note')) {
              target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary);
            }
          } else {
            //attempt to assign incident to user
            var assignToUser = getUserByPDID(source.assigned_to_pd_id);

            if (gs.nil(assignToUser)) {
              gs.debug(
                'PagerDuty incident was assigned to {0}, but ServiceNow could not locate user \'{1}\' to assign the incident to them',
                assignmentsSummary, source.assigned_to_pd_id
              );
              if (shouldAddWorkNote &amp;&amp; notesHelper.isEnabled('show_incident_assignment_note')) {
                target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
                  ', but ServiceNow could not locate user \'' + source.assigned_to_pd_id);
              }
              return;
            } else {
              if (shouldAddWorkNote &amp;&amp; notesHelper.isEnabled('show_incident_assignment_note')) {
                target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
                  ', assigning this incident to them');
              }
              target.assigned_to = assignToUser.getUniqueValue();
              return;
            }
          }

        } else if (action == 'insert') {
          gs.debug('webhookTransform incident.trigger insert for incident {0}', source.id);

          taskHelper.setPdId(source.id);

          target.short_description = 'PagerDuty: ' + source.subject;
          if (notesHelper.isEnabled('show_incident_triggering_note')) {
            target.work_notes = notesHelper.build(insertWorkNote);
          }
          target.x_pd_integration_incident_key = source.incident_key;

          if (gs.nil(source.message_channel_client) || (!gs.nil(source.message_channel_client) &amp;&amp; (!isClientServiceNow))) {
            newGroupSysId = getGroupSysIdFromEscalationPolicyId(source);
            if (!gs.nil(newGroupSysId)) {
              target.setValue('assignment_group', newGroupSysId);
            }
          }

          if (!gs.nil(source.service_id) &amp;&amp; gs.nil(source.ci_sys_id)) {
            target.setValue('cmdb_ci', getCISysID(source.service_id));
          }

          if (!gs.nil(source.ci_sys_id)) {
            target.setValue('cmdb_ci', source.ci_sys_id);
          }

          syncIncPriority();

          // If the status is acknowledged or someone is assigned and acknowledge flag is false,
          // set the Assigned To field to incident
          if (!gs.nil(source.assigned_to_pd_id) &amp;&amp; (source.status == 'acknowledged' || assignOnAckOnly == 'false')) {
            var assignToUser = getUserByPDID(source.assigned_to_pd_id);
            if (gs.nil(assignToUser)) {
              gs.debug(
                'PagerDuty incident {0} was assigned to {1}, but could not find user by PagerDuty ID {2}', target.getDisplayValue(),
                assignmentsSummary, source.assigned_to_pd_id
              );
              if (notesHelper.isEnabled('show_incident_assignment_note')) {
                target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
                  ', but ServiceNow could not locate user with PagerDuty ID \'' + source.assigned_to_pd_id + '\' to assign the incident to them');
              }
              return;
            }

            gs.debug('assignToUser.getDisplayValue() = {0}', assignToUser.getDisplayValue());
            gs.debug(
              'PagerDuty incident {0} was assigned to {1}, re-assigning incident', target.getDisplayValue(),
              assignToUser.getDisplayValue()
            );
            target.assigned_to = assignToUser.getUniqueValue();
          }
        }
        return;
      }

      if ((source.message_type == 'incident.assign' || source.message_type == 'incident.delegate' || source.message_type == 'incident.escalate') &amp;&amp; action == 'update') {

        gs.debug('Assign or delegate incident, assignOnAckOnly:{0}, assigned_to_pd_id:{1}', assignOnAckOnly, source.assigned_to_pd_id);

        if (source.message_type == 'incident.delegate') {
          newGroupSysId = getGroupSysIdFromEscalationPolicyId(source);
          if (!gs.nil(newGroupSysId)) {
            if (!source.message_channel_client || !isClientServiceNow) target.setValue('assignment_group', newGroupSysId);
          }
        }

        //look for change in priority
        syncIncPriority(true);

        //attempt to assign incident to user
        var assignToUser = getUserByPDID(source.assigned_to_pd_id);

        //based on property setting don't auto-assign ServiceNow incident until it's acknowledged
        if (assignOnAckOnly == 'true') {
          if ((!gs.nil(source.message_channel_client) &amp;&amp; (isClientServiceNow) &amp;&amp;
            (!gs.nil(assignToUser) &amp;&amp; (assignToUser.getUniqueValue() == target.assigned_to)) ||
            (source.status == 'acknowledged'))) {
            target.state = taskHelper.triggerStateValue();
          } else {
            gs.debug('PagerDuty incident {0} was assigned to {1}, but property set to assign only on ack', target.getDisplayValue(), assignmentsSummary);
            if (notesHelper.isEnabled('show_incident_reassignment_note')) {
              target.work_notes = notesHelper.build('PagerDuty incident was re-assigned to ' + assignmentsSummary + ' with assignOnAckOnly=' + assignOnAckOnly + ' so the assignee was cleared.');
            }
            target.assigned_to = '';
            target.state = taskHelper.triggerStateValue();
          }
          return;
        }

        if (gs.nil(assignToUser)) {
          gs.debug(
            'PagerDuty incident {0} was assigned to {1}, but could not find user by PD ID {2}', target.getDisplayValue(),
            assignmentsSummary, source.assigned_to_pd_id
          );
          if (notesHelper.isEnabled('show_incident_assignment_note')) {
            target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
              ', but ServiceNow could not locate user \'' + source.assigned_to_pd_id + '\' to assign the incident to them');
          }
          return;
        }

        gs.debug('assignToUser.getDisplayValue() = {0}', assignToUser.getDisplayValue());
        gs.debug(
          'PagerDuty incident {0} was assigned to {1}, re-assigning incident', target.getDisplayValue(),
          assignToUser.getDisplayValue()
        );

        target.assigned_to = assignToUser.getUniqueValue();
        if (notesHelper.isEnabled('show_incident_assignment_note')) {
          target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary);
        }
        return;
      }

      if (source.message_type == 'incident.unacknowledge') {
        ignore = true;
        gs.debug('Transform: ignore incident.unacknowledge -- there should not be an ACK timeout');
        return;
      }

      if (source.message_type == 'incident.acknowledge') {

        if (action == 'insert') {
          ignore = true;
          return;
        } else if (action == 'update') {
          //look for change in priority
          syncIncPriority(true);

          //assign to user based on 'assigned_to_pd_id' if we find it
          var assignToUser = getUserByPDID(source.assigned_to_pd_id);
          if (gs.nil(assignToUser)) {
            target.work_notes = notesHelper.build('PagerDuty incident was acknowledged by ' + assignmentsSummary +
              ', but ServiceNow could not locate user \'' + source.assigned_to_pd_id + '\' to assign the incident to them');
            return;
          }

          target.assigned_to = assignToUser.getUniqueValue();
          target.work_notes = notesHelper.build('PagerDuty incident was acknowledged by ' + assignmentsSummary);
          return;
        }
      }

      if (source.message_type == 'incident.annotate') {
        if (action == 'insert') {
          ignore = true;
          return;
        } else if (action == 'update') {
          if (source.note.toString().indexOf('(from ServiceNow:') === -1) {
            var gdt = new GlideDateTime();
            target.work_notes = notesHelper.build(source.note.toString() + ' (PagerDuty:' + source.username + ' on ' + gdt.getDisplayValue() + ')');
            syncIncPriority(true);
          }
        }
      }

      // Message type is Resolve

      if (source.message_type == 'incident.resolve') {

        if (action == 'insert') {
          // A resolve webhook should never create a new ServiceNow ticket
          ignore = true;
        }

        if (taskHelper.isTaskHasResolvedState(target.state)) {
          // If target.state is already resolved ignore
          ignore = true;
          gs.debug('Transform: ignore incident.resolve since the target is already resolved');
          //if (resolvedReason != "merge_resolve_reason")
          return;

        }


        gs.info('Transform: PagerDuty incident was resolved, setting incident {0} to resolved state', target.getDisplayValue());


        // Worknotes entry for any resolve use case except for a Merge
        if (source.resolve_reason != 'merge_resolve_reason') {
          if (!gs.nil(source.resolved_by_name)) target.work_notes = notesHelper.build('PagerDuty incident was resolved by ' + source.resolved_by_name);
          else target.work_notes = notesHelper.build('PagerDuty incident was resolved');
        }
        // Resolve occurred as a result of merge in PagerDuty, need to link to parent.
        else { //resolveReason == "merge_resolve_reason"
          var parentPdId = source.parent_pd_id;
          //gs.debug("parentPdId: {0}", parentPdId);
          var parentSysId = getParentIncSysIdByPDIncId(parentPdId);
          //gs.debug("parent sysid: {0}", parentSysId);
          if (source.target_table == 'incident') {
            target.parent_incident = parentSysId;
          } else if (source.target_table == 'sn_si_incident') {
            target.parent_security_incident = parentSysId;
          }

          //Get parent incident number for work notes
          var incNumber = getSNIncNumberBySysId(parentSysId);
          if (!gs.nil(source.resolved_by_name)) target.work_notes = notesHelper.build('PagerDuty incident was resolved by ' + source.resolved_by_name + ' due to PagerDuty merge with incident ' + incNumber);
          else target.work_notes = notesHelper.build('PagerDuty incident was resolved due to PagerDuty merge with incident ' + incNumber);

        }

        if (!taskHelper.isTaskHasResolvedState(target.state)) {
          target.state = taskHelper.resolvedStateValue();
        }

        //look for change in priority
        syncIncPriority(true);

      } // end if message type is resolve
    } catch (e) {
      gs.error('PdWebhookTransform, webhookTransform error: {0}', e);
    }
  }

  function runDynamicFieldMapping (messageType, payload) {
    // Add the dynamic field mapping
    var eventArr = messageType.split('.');
    if (eventArr.length &gt; 1) {
      var pifr = new x_pd_integration.PagerDutyInboundFieldRule();
      var results = pifr.getValuesFromPayloadBasedOnEvent(eventArr[1], payload, source.target_table);
      // This is for debugging
      //pifr.printArrayKeyValuePairs(results);
      // Set the target field
      // if setting for a reference, the value is not a valid sys_id, it will set field to empty
      for (var i = 0; i &lt; results.length; i++) {
        var key = results[i].key;
        // eslint-disable-next-line es5/no-es6-methods
        var isClientServiceNow = String(source.message_channel_client).startsWith(serviceNowClientName);
        if ((!gs.nil(source.message_channel_client) &amp;&amp; (!isClientServiceNow)) ||
          (gs.nil(target.getValue(key))) || (gs.nil(source.message_channel_client))) {
          target.setValue(results[i].key, results[i].value);
        }
      }
    }
  }

  function runCustomScript () {
    var custScript = new x_pd_integration.PagerDutyInboundCustomScript();
    custScript.customPostTransformActivity(source, target, action);
  }

  function getUserByEmail (email) {
    var gr = new GlideRecordSecure('sys_user');
    if (gr.get('email', email)) {
      gs.debug('Webhook transform found user {0} for email {1}', gr.getDisplayValue(), email);
      return gr;
    } else {
      gs.debug('Webhook transform could not find user for email {0}', email);
      return;
    }
  }

  function getUserByPDID (pd_id) {
    var gr = new GlideRecordSecure('sys_user');
    if (gr.get('x_pd_integration_pagerduty_id', pd_id)) {
      gs.debug('Webhook transform found user {0} for PageDuty ID {1}', gr.getDisplayValue(), pd_id);
      return gr;
    } else {
      gs.debug('Webhook transform could not find user for PagerDuty ID {0}', pd_id);
      return;
    }
  }

  function getCISysID (serviceID) {
    var gr = new GlideRecordSecure('cmdb_ci');
    if (gr.get('x_pd_integration_pagerduty_service', serviceID)) {
      return gr.getValue('sys_id');
    }
  }

  function getIncidentPriority (inc_id) {
    var gr = new GlideRecordSecure(source.target_table);
    gr.addQuery(taskHelper.getPdIdField(), inc_id);
    gr.query();
    if (gr.next()) {
      return gr.priority;
    }
    return;
  }

  function getParentIncSysIdByPDIncId (pdIncId) {
    var gr = new GlideRecordSecure(source.target_table);
    gr.addQuery(taskHelper.getPdIdField(), pdIncId);
    gr.query();
    if (gr.next()) {
      return gr.sys_id;
    }
    return;
  }

  function getSNIncNumberBySysId (sysId) {
    var gr = new GlideRecordSecure(source.target_table);
    gr.addQuery('sys_id', sysId);
    gr.query();
    if (gr.next()) {
      return gr.number;
    }
    return;
  }

  function getGroupSysIdFromEscalationPolicyId (source) {
    if (gs.nil(source.escalation_policy_id)) return;
    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    return epHelper.getAssignmentGroupIdWithPriority(source.escalation_policy_id, source.priority_id);
  }

  function syncIncPriority (checkPriorityChanges) {
    if (!gs.nil(source.priority_id)) {
      var tr_priority;
      var db_priority;
      var pd = new x_pd_integration.PagerDuty();
      var iuObj = pd.getImpactUrgencyById(source.priority_id);

      if (checkPriorityChanges) {
        db_priority = getIncidentPriority(source.id);
        if (!gs.nil(iuObj) &amp;&amp; iuObj.hasOwnProperty('priority')) {
          tr_priority = iuObj.priority;
        }
      }

      if (!checkPriorityChanges || (db_priority != tr_priority &amp;&amp; !gs.nil(db_priority) &amp;&amp; !gs.nil(tr_priority))) {
        if (!gs.nil(iuObj) &amp;&amp; iuObj.hasOwnProperty('impact') &amp;&amp; iuObj.hasOwnProperty('urgency')) {
          taskHelper.setPriority(iuObj);
          gs.debug('webhookTransform Impact: {0}, Urgency: {1}', iuObj.impact, iuObj.urgency);
        }
      }
    }
  }

  function parseAssignmentsSummary (source) {
    var payload = JSON.parse(source.payload);
    var assignments = payload.incident &amp;&amp; payload.incident.assignments;
    var assignmentsSummary = [];
    if (assignments) {
      assignments.forEach(function (item) {
        assignmentsSummary.push(item.assignee.summary);
      });
    }
    assignmentsSummary.splice(-2, 2, assignmentsSummary.slice(-2).join(' and '));
    return assignmentsSummary.join(', ');
  }

  return {tryTransform: tryTransform};
})();
</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2018-04-18 12:20:40</sys_created_on>
        <sys_id>f7a4712ddb61130070c5771c8c961999</sys_id>
        <sys_mod_count>57</sys_mod_count>
        <sys_name>PdWebhookTransform</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_f7a4712ddb61130070c5771c8c961999</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2020-12-15 00:36:20</sys_updated_on>
    </sys_script_include>
</record_update>
