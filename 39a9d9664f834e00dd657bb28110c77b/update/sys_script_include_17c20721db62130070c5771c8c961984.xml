<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_pd_integration.SimpleObjStubUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SimpleObjStubUtil</name>
        <script>/*** Changes made to this script are not supported by PagerDuty ***/
var SimpleObjStubUtil = (function() {
  var json = new global.JSON();

  var calls = {
    _sessionKey: 'stubCalls',
    _calls: [],
    reset: function () {
      this._calls = [];
      this.saveCallsInSession();
    },
    push: function (call) {
      this._calls.push(call);
      this.saveCallsInSession();
    },
    saveCallsInSession: function () {
      if (typeof gs !== 'undefined') {
        var session = gs.getSession();
        session.putClientData(this._sessionKey, this._calls);
      }
    },
    reduce: function (callback, defaultValue) {
      return this._calls.reduce(callback, defaultValue);
    },
    all: function () {
      return this._calls;
    }
  };

  return {
    stub: stub,
    getCalls: getCalls
  };

  function stub(obj, confObj) {
    calls.reset();

    for (var key in obj) {
      if (obj.hasOwnProperty(key) &amp;&amp; typeof obj[key] == 'function') {
        if (key in confObj) {
           obj[key] = generateStubFunction(confObj[key], key);
        }
      }
    }
  }

  function getCalls() {
    return calls.all();
  }

  function generateStubFunction(methodCases, methodName) {
    gs.info('generateStub for method:{0}', methodName);
    return function self() {
      var args = [].slice.call(arguments);

      calls.push({
        args: args
      });

      self.calledCountWith = function() {
        var argsPatterns = [].slice.call(arguments);
        return calls.reduce(function(prev, curr) {
          if (curr.args.length &lt; argsPatterns.length) {
            return prev;
          }

          for (var i = 0; i &lt; argsPatterns.length; i++) {
            if (!curr.args[i] || !IsArgMatch(curr.args[i], argsPatterns[i])) {
              return prev;
            }
          }

          return ++prev;
        }, 0);
      };

      for (var i = 0; i &lt; methodCases.length; i++) {
        var argsPatterns = methodCases[i].argsPatterns;

        if (!argsPatterns || argsPatterns.length == 0) {
          if (typeof methodCases[i].returns == 'function') {
            return methodCases[i].returns.call(this, args);
          } else {
            return methodCases[i].returns;
          }
        }

        var argsMatched = true;
        for (var j = 0; j &lt; argsPatterns.length; j++) {
          if (!arguments[j] || !IsArgMatch(arguments[j], argsPatterns[j])) {
            argsMatched = false;
            break;
          }
        }
        if (argsMatched) {
          if (typeof methodCases[i].returns == 'function') {
            return methodCases[i].returns.call(this, args, argsPatterns);
          } else {
            return methodCases[i].returns;
          }
        }
      }

      gs.info('!!!!! NOT FOUND MATHCHED ARGS FOR {0}({1})', methodName, [].map.call(arguments, function (item) {
      	if (typeof item == 'object') {
      		return json.encode(item);
      	} else {
      		return item.toString();
      	}
      }).join(','));
    };
  }

  function IsArgMatch(actual, pattern) {
    if (pattern instanceof RegExp) {
      return pattern.test(actual);
    } else if (typeof pattern == 'object') {
      return IsObjectMatchPattern(actual, pattern);
    } else {
      if (pattern === '$$var') {
        return true;
      } else {
        return actual == pattern;
      }
    }
  }

  function IsObjectMatchPattern(actual, pattern) {
    var expectedKeys = Object.keys(pattern);
    var isMatch = true;

    for (var i = 0; i &lt; expectedKeys.length; i++) {
      var key = expectedKeys[i];
      var _actual = actual[key];
      var _pattern;
      if (_actual) {
        _pattern = pattern[key];
        if (typeof _actual == 'object' &amp;&amp; typeof _pattern == 'object') {
          isMatch = IsObjectMatchPattern(_actual, _pattern);
        } else {
          if (_pattern === '$$var') {
            continue;
          } else if (_pattern != _actual) {
            isMatch = false;
            break;
          }
        }
      } else {
        isMatch = false;
        break;
      }
    }

    return isMatch;
  }
})();
</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2018-06-07 11:06:01</sys_created_on>
        <sys_id>17c20721db62130070c5771c8c961984</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>SimpleObjStubUtil</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_17c20721db62130070c5771c8c961984</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2020-09-01 12:49:14</sys_updated_on>
    </sys_script_include>
</record_update>
