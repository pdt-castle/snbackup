<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_pd_integration.PagerDutyMigration</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>*** Changes made to this script are not supported by PagerDuty ***&#13;
Migrate script required for v7.0</description>
        <name>PagerDutyMigration</name>
        <script><![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var webhookV7SchemaId = 'PAKM60Z';
var PagerDutyMigration = Class.create();

PagerDutyMigration.prototype = {
  initialize: function () {
    this.JSON = new global.JSON();

    this.baseURL = gs.getProperty("glide.servlet.uri");
    this.instanceName = gs.getProperty("instance_name");
    var webhookRestApi = gs.getProperty("x_pd_integration.webhook_restapi");
    this.newWebhookUrl = this.baseURL + webhookRestApi;
    this.snAuthUser = gs.getProperty("x_pd_integration.sn_auth_user");
    this.snAuthUserPwd = gs.getProperty("x_pd_integration.sn_auth_userpwd");

    this.webhooksInfo = [];
  },

  /**
   * Refresh all webhook to new extension - used for migrations and webhook key Changes
   */
  updateAllWebhooks: function (source) {
    gs.info("****** Webhook migration started ******");

    //query for all webhooks using base url address
    this.queryWebhooks(this.instanceName, 0, source);
    var webhooksInfo = this.webhooksInfo;

    gs.debug("updateAllWebhooks- ALL WEBHOOKS: " + webhooksInfo.toString());

    var group;
    var ci;
    var obj;
    for (var i = 0; i < webhooksInfo.length; i++) {
      obj = this.updateWebhook(webhooksInfo[i].id, this.newWebhookUrl, webhooksInfo[i].webhookObjectId, this.instanceName, webhooksInfo[i].syncOptions);
      var status = obj.status;
      var id = obj.webhookId;

      if ((status == 200) || (status == 201)) {
        group = new GlideRecordSecure("sys_user_group");
        group.addQuery('x_pd_integration_pagerduty_service', webhooksInfo[i].webhookObjectId);
        group.query();
        while (group.next()) { this._updateGroup(group, id); }
        ci = new GlideRecordSecure("cmdb_ci");
        ci.addQuery('x_pd_integration_pagerduty_service', webhooksInfo[i].webhookObjectId);
        ci.query();
        while (ci.next()) { this._updateCI(ci, id); }
      }
    }
    gs.info("****** Webhook updates completed ******");
  },

  /**
   * Query PagerDuty for all webhooks matching query
   * @return void
   */
  queryWebhooks: function (query, offset, source) {
    if (gs.nil(offset)) {
      offset = 0;
    }
    var limit = 25;
    gs.debug("queryWebhooks, query={0}, offset={1}", query, offset);

    var feature = "webhooks?offset=" + offset + "&limit=" + limit;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature);
    var responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
    var status = response.getStatusCode();
    gs.debug("getWebhooks response: {0}:{1}", status, responseBody);

    if (status == 200) {
      var body = this.JSON.decode(response.getBody());

      var more = body.more;
      var webhooks = body.webhooks;
      if (gs.nil(webhooks) || webhooks.length < 1) {
        gs.debug("getWebhooks: no webhooks found for query=" + query);
        return;
      }

      var oldWebhookSchemas = [
        {
          id: 'PBZUP2B',
          useTarget: true,
          name: 'ServiceNow v6',
        },
        {
          id: 'PAD6MYW',
          useTarget: true,
          name: 'ServiceNow v5',
        },
        {
          id: 'P6MB86H',
          useTarget: true,
          name: 'ServiceNow v4',
        },
        {
          id: 'P84JQII',
          useTarget: true,
          name: 'ServiceNow v3.5',
        },
        {
          id: 'PNR72U4',
          useTarget: false,
          name: 'ServiceNow v3.2.1',
        },
        {
          id: 'PF9KMXH',
          useTarget: false,
          name: 'Generic V1 Webhook',
        },
        {
          id: 'PJFWPEP',
          useTarget: false,
          name: 'Generic V2 Webhook',
        }
      ];

      var shouldSkipWebhook = function(webhook) {
        //Skip for new ServiceNow webhooks
        // eslint-disable-next-line es5/no-es6-methods
        if (webhook.outbound_integration.id == webhookV7SchemaId && source == "module" && webhook.config.target.includes(query)) {
          gs.debug("queryWebhooks: Webhook {0} for Service {1} is already set to new extension", webhook.id, webhook.webhook_object.id);
          return true;
        }
        //Skip non service now and non this instance webhooks
        for (var i = 0; i < oldWebhookSchemas.length; i++) {
          if (oldWebhookSchemas[i].id == webhook.outbound_integration.id) {
            if (oldWebhookSchemas[i].useTarget) {
              // eslint-disable-next-line es5/no-es6-methods
              return !(webhook.config.hasOwnProperty('target') && webhook.config.target.includes(query));
            } else {
              // eslint-disable-next-line es5/no-es6-methods
              return !(webhook.hasOwnProperty('endpoint_url') && webhook.endpoint_url.includes(query));
            }
          } else {
            //return true;
          }
        }
        return true;
      };

      for (var i = 0; i < webhooks.length; i++) {
        if (shouldSkipWebhook(webhooks[i])) {
          gs.debug("queryWebhooks: Webhook {0} for Service {1} is being skipped", webhooks[i].id, webhooks[i].webhook_object.id);
          continue;
        }

        //check serviceID to make sure there's a matching ServiceNow group or Configuration Item
        var serviceID = webhooks[i].webhook_object.id;
        if (!this._hasServiceNowGroup(serviceID)) {
          if (!this._hasServiceNowCI(serviceID)) {
            gs.info("queryWebhooks: No ServiceNow Group or CI found for PagerDuty Service '{0}', will not update webhook to new extension", serviceID);
            continue;
          }
        }

        var webhookInfo = {
          id: webhooks[i].id,
          webhookObjectId: webhooks[i].webhook_object.id
        };

        var syncOptions = "sync_all";
        if (webhooks[i].hasOwnProperty('config')) {
          var config = webhooks[i].config;
          if (config.hasOwnProperty('sync_options')) {
            syncOptions = webhooks[i].config.sync_options;
          }
        }
        webhookInfo.syncOptions = syncOptions;
        this.webhooksInfo.push(webhookInfo);
      }

      //paging
      if (more) {
        this.queryWebhooks(query, limit + offset);
      }
    }
  },

  /**
   *
   * @param {String}
   * @return {object} string Status Code, string webhookID
   */
  updateWebhook: function (webhookId, webhookUrl, serviceId, instanceName, syncOptions) {
    gs.debug("Updating webhook " + webhookId + " to new extension.");
    var feature = "webhooks/" + webhookId;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.deleteREST(feature);
    var responseBody = this.JSON.decode(response.getBody());
    var status = response.getStatusCode();

    if (response.haveError()) {
      var errCode = responseBody.error.code;
      var errors = responseBody.error.errors.toString();
      var errorMessage = "error: " + responseBody.error.message;

      gs.error("Failed to delete webhook for id:{0} error code:{1},{2}, {3}", webhookId, errCode.toString(), errorMessage, errors);
      return {
        status: status,
        webhookId: webhookId
      };
    }

    if (status == 204) {
      gs.info("Deleted webhook " + webhookId + ".  Attempting to create new version of webhook.");

      var body = {
        "webhook": {
          "description": "Auto provisioned via ServiceNow Integration. This extension sends data back to your ServiceNow instance.",
          "name": "ServiceNow (" + instanceName + ")",
          "summary": "ServiceNow (" + instanceName + ")",
          "type": "webhook",
          "outbound_integration": {
            "id": webhookV7SchemaId,
            "type": "outbound_integration"
          },
          "config": {
            "target": webhookUrl,
            "sync_options": syncOptions,
            "snow_user": this.snAuthUser,
            "snow_password": this.snAuthUserPwd
          },
          "webhook_object": {
            "id": serviceId,
            "type": "service"
          }
        }
      };

      feature = 'webhooks';
      var pd = new x_pd_integration.PagerDuty();
      var userEmail = pd.getValidEmail(gs.getUserID());
      response = rest.postREST(feature, body, userEmail);
      responseBody = this.JSON.decode(response.getBody());
      status = response.getStatusCode();

      if (response.haveError()) {
        var errCode = responseBody.error.code;
        var errors = responseBody.error.errors.toString();
        var errorMessage = "error: " + responseBody.error.message;

        gs.error("Failed to create new webhook for service:{0} error code:{1},{2}, {3}", serviceId, errCode.toString(), errorMessage, errors);
        return {
          status: status,
          webhookId: webhookId
        };
      }

      if ((status == 200) || (status == 201)) {
        var id = responseBody.webhook.id;
        gs.info("Created webhook " + id + " with new extension.");
        return {
          status: status,
          webhookId: id
        };
      }
    }

  },

  /**
   *
   */
  _hasServiceNowGroup: function (id) {
    var gr = new GlideRecordSecure("sys_user_group");
    gr.addQuery("x_pd_integration_pagerduty_service", id);
    gr.query();
    return gr.hasNext();

  },

  /**
   *
   */
  _hasServiceNowCI: function (id) {
    var gr = new GlideRecordSecure("cmdb_ci");
    gr.addQuery("x_pd_integration_pagerduty_service", id);
    gr.query();
    return gr.hasNext();

  },

  /**
  * Update ServiceNow group record with PagerDuty webhook ID, using import table
  * @param {GlideRecordSecure} group record
  * @param (String) PagerDuty webhook ID
  * @return void
  */
  _updateGroup: function (group, webhookID) {
    var me = "_updateGroup";
    //update group through import set for tracking purposes
    var gr = new GlideRecordSecure("x_pd_integration_pagerduty_group_import");
    gr.setValue("group_sysid", group.getUniqueValue());
    gr.setValue("webhook_id", webhookID);
    gr.insert();
    gs.debug("{0} added import for group {1} with webhook:{2}", me, group.getDisplayValue(),
      webhookID);
  },

  /**
  * Update ServiceNow CI record with PagerDuty webhook ID, using import table
  * @param {GlideRecordSecure} CI record
  * @param (String) PagerDuty webhook ID
  * @return void
  */
  _updateCI: function (ci, webhookID) {
    var me = "_updateCI";
    //update group through import set for tracking purposes
    var gr = new GlideRecordSecure("x_pd_integration_pagerduty_ci_import");
    gr.setValue("cmdb_ci_sysid", ci.getUniqueValue());
    gr.setValue("webhook_id", webhookID);
    gr.insert();
    gs.debug("{0} added import for ci {1} with webhook:{2}", me, ci.getDisplayValue(),
      webhookID);
  },

  migrateEscalationPolicies: function() {
    var map = [];
    var gr = new GlideRecord('x_pd_integration_join_group_and_ep');
    gr.addQuery('ep_active', true);
    gr.query();
    while (gr.next()) {
      map.push({ ag: '' + gr.ag_sys_id, ep: '' + gr.ep_sys_id });
    }
    map.forEach(function(record) {
      gr = new GlideRecord('x_pd_integration_map_priority_to_ep_import');
      gr.initialize();
      gr.active = true;
      gr.assignment_group = record.ag;
      gr.escalation_policy = record.ep;
      gr.insert();
    });
  },

  type: "PagerDutyMigration",
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>PagerDuty_v8.0</sys_created_by>
        <sys_created_on>2016-08-09 16:48:21</sys_created_on>
        <sys_id>06831903db4d660087f0f5f0cf96196e</sys_id>
        <sys_mod_count>110</sys_mod_count>
        <sys_name>PagerDutyMigration</sys_name>
        <sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration">39a9d9664f834e00dd657bb28110c77b</sys_package>
        <sys_policy/>
        <sys_scope display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</sys_scope>
        <sys_update_name>sys_script_include_06831903db4d660087f0f5f0cf96196e</sys_update_name>
        <sys_updated_by>PagerDuty_v8.0</sys_updated_by>
        <sys_updated_on>2020-09-09 09:46:31</sys_updated_on>
    </sys_script_include>
</record_update>
